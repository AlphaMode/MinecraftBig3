import net.neoforged.jarcompatibilitychecker.gradle.JCCPlugin
import net.neoforged.jarcompatibilitychecker.gradle.CompatibilityTask
import net.neoforged.jarcompatibilitychecker.gradle.ProvideNeoForgeJarTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.jarcompatibilitychecker' version '0.1.12'
    id 'net.neoforged.gradleutils'
    id 'neoforge.versioning'
}

apply plugin : net.neoforged.neodev.NeoDevPlugin

gradleutils.setupSigning(project: project, signAllPublications: true)

changelog {
    from '21.0'
    disableAutomaticPublicationRegistration()
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

final checkVersion = JCCPlugin.providePreviousVersion(
        project.providers, project.providers.provider({['http://alphasmoddingserver.com/releases']}), project.providers.provider({'me.alphamode:mcbig'}),
        project.provider { project.version }.map { ver -> CompatibilityTask.VersionComponentTest.MINOR.predicate(ver) }
)
final createCompatJar = tasks.register('createCompatibilityCheckJar', ProvideNeoForgeJarTask) {
    // Use the same jar that the patches were generated against
    cleanJar.set(tasks.generateClientBinPatches.cleanJar)
    maven.set('http://alphasmoddingserver.com/releases')
    artifact.set('me.alphamode:mcbig')
    version.set(checkVersion)
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(java_version)
    }
}
checkJarCompatibility {
    isAPI = true
    baseJar = createCompatJar.flatMap { it.output }
}

neoDev {
    mods {
        minecraft {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    // For an overview of what the nonstandard configurations do,
    // have a look at NeoDevConfigurations.java in the buildSrc folder.

    neoFormData("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform'
        }
        endorseStrictVersions()
    }
    neoFormDependencies("net.neoforged:neoform:${project.minecraft_version}-${project.neoform_version}") {
        capabilities {
            requireCapability 'net.neoforged:neoform-dependencies'
        }
        endorseStrictVersions()
    }

    for (var asmModule : ["org.ow2.asm:asm", "org.ow2.asm:asm-commons", "org.ow2.asm:asm-tree", "org.ow2.asm:asm-util", "org.ow2.asm:asm-analysis"]) {
        moduleLibraries(asmModule) {
            // Vanilla ships with ASM 9.3 transitively (via their OpenID connect library dependency), we require
            // ASM in a more recent version and have to strictly require this to override the strict Minecraft version.
            version {
                strictly project.asm_version
            }
        }
    }
    moduleLibraries "me.alphamode.wisp:wisp-loader:1.1"

    libraries "net.neoforged:mergetool:${project.mergetool_version}:api"
    libraries "com.electronwill.night-config:core:${project.nightconfig_version}"
    libraries "com.electronwill.night-config:toml:${project.nightconfig_version}"
    libraries "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    libraries "net.jodah:typetools:${project.typetools_version}"
    libraries "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    libraries("net.fabricmc:sponge-mixin:${project.mixin_version}") { transitive = false }
    libraries "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    libraries ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    // We depend on apache commons directly as there is a difference between the version the server uses and the one the client does
    libraries "org.apache.commons:commons-lang3:${project.apache_commons_lang3_version}"
    libraries ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    userdevCompileOnly jarJar("io.github.llamalad7:mixinextras-neoforge:${project.mixin_extras_version}")

    userdevTestFixtures("net.neoforged.fancymodloader:junit-fml:${project.fancy_mod_loader_version}") {
        endorseStrictVersions()
    }
}

neoDev {
    runs {
        configureEach {
            gameDirectory = layout.projectDir.dir("run/$name")
        }
        client {
            client()
        }
        server {
            server()
        }
        gameTestServer {
            type = "gameTestServer"
        }
        data {
            data()
            programArguments.addAll '--mod', 'mcbig', '--flat', '--all', '--validate',
                    '--existing', rootProject.file("src/main/resources").absolutePath,
                    '--output', rootProject.file("src/generated/resources").absolutePath
        }
    }
}

tasks.withType(Javadoc.class).configureEach {
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
    options.addStringOption('Xdoclint:all,-missing', '-public')
}

AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.components.findByName("java")
// Ensure the two default variants are not published, since they
// contain Minecraft classes
javaComponent.withVariantsFromConfiguration(configurations.apiElements) {
    it.skip()
}
javaComponent.withVariantsFromConfiguration(configurations.runtimeElements) {
    it.skip()
}

// Resolvable configurations only
configurations {
    modDevBundle {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom neoFormData
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("me.alphamode:mcbig-moddev-bundle:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    modDevConfig {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "data"))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("me.alphamode:mcbig-moddev-config:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {} // Publish it
    }
    installerJar {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EMBEDDED))
            // The installer targets JDK 8
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
        }
        outgoing {
            capability("me.alphamode:mcbig-installer:${project.version}")
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    universalJar {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, JavaVersion.current().majorVersion.toInteger())
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
        // Publish it
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    changelog {
        canBeDeclared = false
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "changelog"))
        }
        // Publish it, but only for release versions
        if (!rootProject.isPreReleaseVersion) {
            javaComponent.addVariantsFromConfiguration(it) {}
        }
    }
    modDevApiElements {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom libraries, moduleLibraries, userdevCompileOnly, neoFormDependencies
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
        }
        outgoing {
            capability("me.alphamode:mcbig-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevRuntimeElements {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom libraries, moduleLibraries, neoFormDependencies
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("me.alphamode:mcbig-dependencies:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevModulePath {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom moduleLibraries
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
        }
        outgoing {
            capability("me.alphamode:mcbig-moddev-module-path:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
    modDevTestFixtures {
        canBeDeclared = false
        canBeResolved = false
        extendsFrom userdevTestFixtures
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability("me.alphamode:mcbig-moddev-test-fixtures:${project.version}")
        }
        javaComponent.addVariantsFromConfiguration(it) {}
    }
}

processResources {
    inputs.property("version", project.version)
    final version = project.version
    filesMatching("META-INF/neoforge.mods.toml") {
        expand([
                "global": [
                        "neoForgeVersion": version
                ]
        ])
    }
}

artifacts {
    modDevBundle(userdevJar) {
        setClassifier("userdev") // Legacy
    }
    modDevConfig(writeUserDevConfig.userDevConfig) {
        setClassifier("moddev-config")
    }
    universalJar(universalJar) {
        setClassifier("universal")
    }
    installerJar(installerJar) {
        setClassifier("installer")
    }
//    changelog(createChangelog.outputFile) {
//        builtBy(createChangelog)
//        setClassifier("changelog")
//        setExtension("txt")
//    }
}

publishing {
    publications.create('MinecraftBig3', MavenPublication) {
        groupId = project.group
        artifactId = project.name
        version = project.version

        from components.java

        versionMapping {
            usage('java-api') {
                fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
                fromResolutionResult()
            }
        }

        pom {
            name = project.name
            description = 'Modifactions to Minecraft to enable mod developers.'
            url = 'https://github.com/AlphaMode/MinecraftBig3'

            scm {
                url = 'https://github.com/AlphaMode/MinecraftBig3'
                connection = 'scm:git:git://github.com/AlphaMode/MinecraftBig3.git'
                developerConnection = 'scm:git:git@github.com:AlphaMode/MinecraftBig3.git'
            }

            issueManagement {
                system = 'github'
                url = 'https://github.com/AlphaMode/MinecraftBig3/issues'
            }

            licenses {
                license {
                    name = 'LGPL 2.1'
                    url = 'https://github.com/AlphaMode/MinecraftBig3/blob/1.20.4/LICENSE.txt'
                    distribution = 'repo'
                }
            }
        }
    }
    repositories {
        maven gradleutils.getPublishingMaven()
    }
}