--- a/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -14,26 +_,26 @@
         super(
             LightLayer.SKY,
             p_75868_,
-            new SkyLightSectionStorage.SkyDataLayerStorageMap(new Long2ObjectOpenHashMap<>(), new Long2IntOpenHashMap(), Integer.MAX_VALUE)
+            new SkyLightSectionStorage.SkyDataLayerStorageMap(new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(), new it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<>(), Integer.MAX_VALUE)
         );
     }
 
     @Override
-    protected int getLightValue(long p_75880_) {
+    protected int getLightValue(BlockPos p_75880_) {
         return this.getLightValue(p_75880_, false);
     }
 
-    protected int getLightValue(long p_164458_, boolean p_164459_) {
-        long i = SectionPos.blockToSection(p_164458_);
-        int j = SectionPos.y(i);
+    protected int getLightValue(BlockPos p_164458_, boolean p_164459_) {
+        SectionPos i = SectionPos.of(p_164458_);
+        int j = i.getY();
         SkyLightSectionStorage.SkyDataLayerStorageMap skylightsectionstorage$skydatalayerstoragemap = p_164459_
             ? this.updatingSectionData
             : this.visibleSectionData;
-        int k = skylightsectionstorage$skydatalayerstoragemap.topSections.get(SectionPos.getZeroNode(i));
+        int k = skylightsectionstorage$skydatalayerstoragemap.topSections.getInt(SectionPos.getZeroNode(i.x(), i.z()));
         if (k != skylightsectionstorage$skydatalayerstoragemap.currentLowestY && j < k) {
             DataLayer datalayer = this.getDataLayer(skylightsectionstorage$skydatalayerstoragemap, i);
             if (datalayer == null) {
-                for(p_164458_ = BlockPos.getFlatIndex(p_164458_);
+                for(p_164458_ = new BlockPos(p_164458_.getBigX(), 0, p_164458_.getBigZ());
                     datalayer == null;
                     datalayer = this.getDataLayer(skylightsectionstorage$skydatalayerstoragemap, i)
                 ) {
@@ -41,14 +_,14 @@
                         return 15;
                     }
 
-                    i = SectionPos.offset(i, Direction.UP);
+                    i = i.relative(Direction.UP);
                 }
             }
 
             return datalayer.get(
-                SectionPos.sectionRelative(BlockPos.getX(p_164458_)),
-                SectionPos.sectionRelative(BlockPos.getY(p_164458_)),
-                SectionPos.sectionRelative(BlockPos.getZ(p_164458_))
+                SectionPos.sectionRelative(p_164458_.getBigX()),
+                SectionPos.sectionRelative(p_164458_.getBigY()),
+                SectionPos.sectionRelative(p_164458_.getBigZ())
             );
         } else {
             return p_164459_ && !this.lightOnInSection(i) ? 0 : 15;
@@ -56,51 +_,51 @@
     }
 
     @Override
-    protected void onNodeAdded(long p_75885_) {
-        int i = SectionPos.y(p_75885_);
+    protected void onNodeAdded(SectionPos p_75885_) {
+        int i = p_75885_.y().intValue();
         if (this.updatingSectionData.currentLowestY > i) {
             this.updatingSectionData.currentLowestY = i;
             this.updatingSectionData.topSections.defaultReturnValue(this.updatingSectionData.currentLowestY);
         }
 
-        long j = SectionPos.getZeroNode(p_75885_);
-        int k = this.updatingSectionData.topSections.get(j);
+        SectionPos j = SectionPos.getZeroNode(p_75885_.x(), p_75885_.z());
+        int k = this.updatingSectionData.topSections.getInt(j);
         if (k < i + 1) {
             this.updatingSectionData.topSections.put(j, i + 1);
         }
     }
 
     @Override
-    protected void onNodeRemoved(long p_75887_) {
-        long i = SectionPos.getZeroNode(p_75887_);
-        int j = SectionPos.y(p_75887_);
-        if (this.updatingSectionData.topSections.get(i) == j + 1) {
-            long k;
-            for(k = p_75887_; !this.storingLightForSection(k) && this.hasLightDataAtOrBelow(j); k = SectionPos.offset(k, Direction.DOWN)) {
+    protected void onNodeRemoved(SectionPos p_75887_) {
+        SectionPos i = SectionPos.getZeroNode(p_75887_.x(), p_75887_.z());
+        int j = p_75887_.getY();
+        if (this.updatingSectionData.topSections.getInt(i) == j + 1) {
+            SectionPos k;
+            for(k = p_75887_; !this.storingLightForSection(k) && this.hasLightDataAtOrBelow(j); k = k.relative(Direction.DOWN)) {
                 --j;
             }
 
             if (this.storingLightForSection(k)) {
                 this.updatingSectionData.topSections.put(i, j + 1);
             } else {
-                this.updatingSectionData.topSections.remove(i);
+                this.updatingSectionData.topSections.removeInt(i);
             }
         }
     }
 
     @Override
-    protected DataLayer createDataLayer(long p_75883_) {
+    protected DataLayer createDataLayer(SectionPos p_75883_) {
         DataLayer datalayer = this.queuedSections.get(p_75883_);
         if (datalayer != null) {
             return datalayer;
         } else {
-            int i = this.updatingSectionData.topSections.get(SectionPos.getZeroNode(p_75883_));
-            if (i != this.updatingSectionData.currentLowestY && SectionPos.y(p_75883_) < i) {
-                long j = SectionPos.offset(p_75883_, Direction.UP);
+            int i = this.updatingSectionData.topSections.getInt(SectionPos.getZeroNode(p_75883_.x(), p_75883_.z()));
+            if (i != this.updatingSectionData.currentLowestY && p_75883_.getY() < i) {
+                SectionPos j = p_75883_.relative(Direction.UP);
 
                 DataLayer datalayer1;
                 while((datalayer1 = this.getDataLayer(j, true)) == null) {
-                    j = SectionPos.offset(j, Direction.UP);
+                    j = j.relative(Direction.UP);
                 }
 
                 return repeatFirstLayer(datalayer1);
@@ -129,14 +_,14 @@
         return p_278270_ >= this.updatingSectionData.currentLowestY;
     }
 
-    protected boolean isAboveData(long p_75891_) {
-        long i = SectionPos.getZeroNode(p_75891_);
-        int j = this.updatingSectionData.topSections.get(i);
-        return j == this.updatingSectionData.currentLowestY || SectionPos.y(p_75891_) >= j;
+    protected boolean isAboveData(SectionPos p_75891_) {
+        SectionPos i = SectionPos.getZeroNode(p_75891_.x(), p_75891_.z());
+        int j = this.updatingSectionData.topSections.getInt(i);
+        return j == this.updatingSectionData.currentLowestY || p_75891_.y().longValue() >= j;
     }
 
-    protected int getTopSectionY(long p_285094_) {
-        return this.updatingSectionData.topSections.get(p_285094_);
+    protected int getTopSectionY(SectionPos p_285094_) {
+        return this.updatingSectionData.topSections.getInt(p_285094_);
     }
 
     protected int getBottomSectionY() {
@@ -145,9 +_,9 @@
 
     protected static final class SkyDataLayerStorageMap extends DataLayerStorageMap<SkyLightSectionStorage.SkyDataLayerStorageMap> {
         int currentLowestY;
-        final Long2IntOpenHashMap topSections;
+        final it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<SectionPos> topSections;
 
-        public SkyDataLayerStorageMap(Long2ObjectOpenHashMap<DataLayer> p_75903_, Long2IntOpenHashMap p_75904_, int p_75905_) {
+        public SkyDataLayerStorageMap(it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<SectionPos, DataLayer> p_75903_, it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap<SectionPos> p_75904_, int p_75905_) {
             super(p_75903_);
             this.topSections = p_75904_;
             p_75904_.defaultReturnValue(p_75905_);
