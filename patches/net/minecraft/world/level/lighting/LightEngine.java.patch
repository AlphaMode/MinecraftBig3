--- a/net/minecraft/world/level/lighting/LightEngine.java
+++ b/net/minecraft/world/level/lighting/LightEngine.java
@@ -26,12 +_,12 @@
     protected static final Direction[] PROPAGATION_DIRECTIONS = Direction.values();
     protected final LightChunkGetter chunkSource;
     protected final S storage;
-    private final LongOpenHashSet blockNodesToCheck = new LongOpenHashSet(512, 0.5F);
-    private final LongArrayFIFOQueue decreaseQueue = new LongArrayFIFOQueue();
-    private final LongArrayFIFOQueue increaseQueue = new LongArrayFIFOQueue();
+    private final it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<BlockPos> blockNodesToCheck = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(512, 0.5F);
+    private final it.unimi.dsi.fastutil.objects.ObjectArrayFIFOQueue<me.alphamode.mcbig.lighting.LightingData> decreaseQueue = new it.unimi.dsi.fastutil.objects.ObjectArrayFIFOQueue<>();
+    private final it.unimi.dsi.fastutil.objects.ObjectArrayFIFOQueue<me.alphamode.mcbig.lighting.LightingData> increaseQueue = new it.unimi.dsi.fastutil.objects.ObjectArrayFIFOQueue<>();
     private final BlockPos.MutableBlockPos mutablePos = new BlockPos.MutableBlockPos();
     private static final int CACHE_SIZE = 2;
-    private final long[] lastChunkPos = new long[2];
+    private final ChunkPos[] lastChunkPos = new ChunkPos[2];
     private final LightChunk[] lastChunk = new LightChunk[2];
 
     protected LightEngine(LightChunkGetter p_285189_, S p_284964_) {
@@ -74,8 +_,8 @@
     }
 
     protected BlockState getState(BlockPos p_285338_) {
-        int i = SectionPos.blockToSectionCoord(p_285338_.getX());
-        int j = SectionPos.blockToSectionCoord(p_285338_.getZ());
+        me.alphamode.mcbig.math.BigInteger i = SectionPos.blockToSectionCoord(p_285338_.getBigX());
+        me.alphamode.mcbig.math.BigInteger j = SectionPos.blockToSectionCoord(p_285338_.getBigZ());
         LightChunk lightchunk = this.getChunk(i, j);
         return lightchunk == null ? Blocks.BEDROCK.defaultBlockState() : lightchunk.getBlockState(p_285338_);
     }
@@ -84,19 +_,19 @@
         return Math.max(1, p_285084_.getLightBlock(this.chunkSource.getLevel(), p_285057_));
     }
 
-    protected boolean shapeOccludes(long p_285115_, BlockState p_285154_, long p_284957_, BlockState p_285155_, Direction p_285327_) {
+    protected boolean shapeOccludes(BlockPos p_285115_, BlockState p_285154_, BlockPos p_284957_, BlockState p_285155_, Direction p_285327_) {
         VoxelShape voxelshape = this.getOcclusionShape(p_285154_, p_285115_, p_285327_);
         VoxelShape voxelshape1 = this.getOcclusionShape(p_285155_, p_284957_, p_285327_.getOpposite());
         return Shapes.faceShapeOccludes(voxelshape, voxelshape1);
     }
 
-    protected VoxelShape getOcclusionShape(BlockState p_285136_, long p_285517_, Direction p_285376_) {
+    protected VoxelShape getOcclusionShape(BlockState p_285136_, BlockPos p_285517_, Direction p_285376_) {
         return getOcclusionShape(this.chunkSource.getLevel(), this.mutablePos.set(p_285517_), p_285136_, p_285376_);
     }
 
     @Nullable
-    protected LightChunk getChunk(int p_284967_, int p_285447_) {
-        long i = ChunkPos.asLong(p_284967_, p_285447_);
+    protected LightChunk getChunk(me.alphamode.mcbig.math.BigInteger p_284967_, me.alphamode.mcbig.math.BigInteger p_285447_) {
+        ChunkPos i = new ChunkPos(p_284967_, p_285447_);
 
         for(int j = 0; j < 2; ++j) {
             if (i == this.lastChunkPos[j]) {
@@ -123,33 +_,33 @@
 
     @Override
     public void checkBlock(BlockPos p_285352_) {
-        this.blockNodesToCheck.add(p_285352_.asLong());
+        this.blockNodesToCheck.add(p_285352_);
     }
 
-    public void queueSectionData(long p_285221_, @Nullable DataLayer p_285427_) {
+    public void queueSectionData(SectionPos p_285221_, @Nullable DataLayer p_285427_) {
         this.storage.queueSectionData(p_285221_, p_285427_);
     }
 
     public void retainData(ChunkPos p_285314_, boolean p_284937_) {
-        this.storage.retainData(SectionPos.getZeroNode(p_285314_.x, p_285314_.z), p_284937_);
+        this.storage.retainData(SectionPos.getZeroNode(p_285314_.x(), p_285314_.z()), p_284937_);
     }
 
     @Override
     public void updateSectionStatus(SectionPos p_285167_, boolean p_284934_) {
-        this.storage.updateSectionStatus(p_285167_.asLong(), p_284934_);
+        this.storage.updateSectionStatus(p_285167_, p_284934_);
     }
 
     @Override
     public void setLightEnabled(ChunkPos p_285116_, boolean p_285522_) {
-        this.storage.setLightEnabled(SectionPos.getZeroNode(p_285116_.x, p_285116_.z), p_285522_);
+        this.storage.setLightEnabled(SectionPos.getZeroNode(p_285116_.x().intValue(), p_285116_.z().intValue()), p_285522_);
     }
 
     @Override
     public int runLightUpdates() {
-        LongIterator longiterator = this.blockNodesToCheck.iterator();
+        it.unimi.dsi.fastutil.objects.ObjectIterator<BlockPos> longiterator = this.blockNodesToCheck.iterator();
 
         while(longiterator.hasNext()) {
-            this.checkNode(longiterator.nextLong());
+            this.checkNode(longiterator.next());
         }
 
         this.blockNodesToCheck.clear();
@@ -166,17 +_,16 @@
     private int propagateIncreases() {
         int i;
         for(i = 0; !this.increaseQueue.isEmpty(); ++i) {
-            long j = this.increaseQueue.dequeueLong();
-            long k = this.increaseQueue.dequeueLong();
-            int l = this.storage.getStoredLevel(j);
-            int i1 = LightEngine.QueueEntry.getFromLevel(k);
-            if (LightEngine.QueueEntry.isIncreaseFromEmission(k) && l < i1) {
-                this.storage.setStoredLevel(j, i1);
+            me.alphamode.mcbig.lighting.LightingData data = this.increaseQueue.dequeue();
+            int l = this.storage.getStoredLevel(data.pos());
+            int i1 = LightEngine.QueueEntry.getFromLevel(data.data());
+            if (LightEngine.QueueEntry.isIncreaseFromEmission(data.data()) && l < i1) {
+                this.storage.setStoredLevel(data.pos(), i1);
                 l = i1;
             }
 
             if (l == i1) {
-                this.propagateIncrease(j, k, l);
+                this.propagateIncrease(data.pos(), data.data(), l);
             }
         }
 
@@ -186,22 +_,19 @@
     private int propagateDecreases() {
         int i;
         for(i = 0; !this.decreaseQueue.isEmpty(); ++i) {
-            long j = this.decreaseQueue.dequeueLong();
-            long k = this.decreaseQueue.dequeueLong();
-            this.propagateDecrease(j, k);
+            me.alphamode.mcbig.lighting.LightingData data = this.decreaseQueue.dequeue();
+            this.propagateDecrease(data.pos(), data.data());
         }
 
         return i;
     }
 
-    protected void enqueueDecrease(long p_285228_, long p_285464_) {
-        this.decreaseQueue.enqueue(p_285228_);
-        this.decreaseQueue.enqueue(p_285464_);
+    protected void enqueueDecrease(BlockPos p_285228_, long p_285464_) {
+        this.decreaseQueue.enqueue(new me.alphamode.mcbig.lighting.LightingData(p_285228_, p_285464_));
     }
 
-    protected void enqueueIncrease(long p_285223_, long p_285022_) {
-        this.increaseQueue.enqueue(p_285223_);
-        this.increaseQueue.enqueue(p_285022_);
+    protected void enqueueIncrease(BlockPos p_285223_, long p_285022_) {
+        this.increaseQueue.enqueue(new me.alphamode.mcbig.lighting.LightingData(p_285223_, p_285022_));
     }
 
     @Override
@@ -212,27 +_,27 @@
     @Nullable
     @Override
     public DataLayer getDataLayerData(SectionPos p_285093_) {
-        return this.storage.getDataLayerData(p_285093_.asLong());
+        return this.storage.getDataLayerData(p_285093_);
     }
 
     @Override
     public int getLightValue(BlockPos p_285149_) {
-        return this.storage.getLightValue(p_285149_.asLong());
+        return this.storage.getLightValue(p_285149_);
     }
 
-    public String getDebugData(long p_285363_) {
+    public String getDebugData(SectionPos p_285363_) {
         return this.getDebugSectionType(p_285363_).display();
     }
 
-    public LayerLightSectionStorage.SectionType getDebugSectionType(long p_285320_) {
+    public LayerLightSectionStorage.SectionType getDebugSectionType(SectionPos p_285320_) {
         return this.storage.getDebugSectionType(p_285320_);
     }
 
-    protected abstract void checkNode(long p_285507_);
-
-    protected abstract void propagateIncrease(long p_285325_, long p_285026_, int p_285197_);
-
-    protected abstract void propagateDecrease(long p_284941_, long p_285213_);
+    protected abstract void checkNode(BlockPos p_285507_);
+
+    protected abstract void propagateIncrease(BlockPos p_285325_, long p_285026_, int p_285197_);
+
+    protected abstract void propagateDecrease(BlockPos p_284941_, long p_285213_);
 
     public static class QueueEntry {
         private static final int FROM_LEVEL_BITS = 4;
