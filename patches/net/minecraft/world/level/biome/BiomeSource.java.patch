--- a/net/minecraft/world/level/biome/BiomeSource.java
+++ b/net/minecraft/world/level/biome/BiomeSource.java
@@ -40,25 +_,25 @@
         return this.possibleBiomes.get();
     }
 
-    public Set<Holder<Biome>> getBiomesWithin(int p_186705_, int p_186706_, int p_186707_, int p_186708_, Climate.Sampler p_186709_) {
-        int i = QuartPos.fromBlock(p_186705_ - p_186708_);
+    public Set<Holder<Biome>> getBiomesWithin(me.alphamode.mcbig.math.BigInteger p_186705_, int p_186706_, me.alphamode.mcbig.math.BigInteger p_186707_, int p_186708_, Climate.Sampler p_186709_) {
+        me.alphamode.mcbig.math.BigInteger i = QuartPos.fromBlock(p_186705_.subtract(p_186708_));
         int j = QuartPos.fromBlock(p_186706_ - p_186708_);
-        int k = QuartPos.fromBlock(p_186707_ - p_186708_);
-        int l = QuartPos.fromBlock(p_186705_ + p_186708_);
+        me.alphamode.mcbig.math.BigInteger k = QuartPos.fromBlock(p_186707_.subtract(p_186708_));
+        me.alphamode.mcbig.math.BigInteger l = QuartPos.fromBlock(p_186705_.add(p_186708_));
         int i1 = QuartPos.fromBlock(p_186706_ + p_186708_);
-        int j1 = QuartPos.fromBlock(p_186707_ + p_186708_);
-        int k1 = l - i + 1;
+        me.alphamode.mcbig.math.BigInteger j1 = QuartPos.fromBlock(p_186707_.add(p_186708_));
+        int k1 = l.subtract(i).add().intValue();
         int l1 = i1 - j + 1;
-        int i2 = j1 - k + 1;
+        int i2 = j1.subtract(k).add().intValue();
         Set<Holder<Biome>> set = Sets.newHashSet();
 
         for(int j2 = 0; j2 < i2; ++j2) {
             for(int k2 = 0; k2 < k1; ++k2) {
                 for(int l2 = 0; l2 < l1; ++l2) {
-                    int i3 = i + k2;
+                    me.alphamode.mcbig.math.BigInteger i3 = i.add(k2);
                     int j3 = j + l2;
-                    int k3 = k + j2;
-                    set.add(this.getNoiseBiome(i3, j3, k3, p_186709_));
+                    me.alphamode.mcbig.math.BigInteger k3 = k.add(j2);
+                    set.add(this.getNoiseBiome(i3, me.alphamode.mcbig.math.BigInteger.val(j3), k3, p_186709_));
                 }
             }
         }
@@ -68,7 +_,7 @@
 
     @Nullable
     public Pair<BlockPos, Holder<Biome>> findBiomeHorizontal(
-        int p_220571_, int p_220572_, int p_220573_, int p_220574_, Predicate<Holder<Biome>> p_220575_, RandomSource p_220576_, Climate.Sampler p_220577_
+        me.alphamode.mcbig.math.BigInteger p_220571_, int p_220572_, me.alphamode.mcbig.math.BigInteger p_220573_, int p_220574_, Predicate<Holder<Biome>> p_220575_, RandomSource p_220576_, Climate.Sampler p_220577_
     ) {
         return this.findBiomeHorizontal(p_220571_, p_220572_, p_220573_, p_220574_, 1, p_220575_, p_220576_, false, p_220577_);
     }
@@ -85,14 +_,14 @@
             int[] aint = Mth.outFromOrigin(p_220578_.getY(), p_220584_.getMinBuildHeight() + 1, p_220584_.getMaxBuildHeight(), p_220581_).toArray();
 
             for(BlockPos.MutableBlockPos blockpos$mutableblockpos : BlockPos.spiralAround(BlockPos.ZERO, i, Direction.EAST, Direction.SOUTH)) {
-                int j = p_220578_.getX() + blockpos$mutableblockpos.getX() * p_220580_;
-                int k = p_220578_.getZ() + blockpos$mutableblockpos.getZ() * p_220580_;
-                int l = QuartPos.fromBlock(j);
-                int i1 = QuartPos.fromBlock(k);
+                me.alphamode.mcbig.math.BigInteger j = p_220578_.getBigX().add(blockpos$mutableblockpos.getBigX().multiply(p_220580_));
+                me.alphamode.mcbig.math.BigInteger k = p_220578_.getBigZ().add(blockpos$mutableblockpos.getBigZ().multiply(p_220580_));
+                me.alphamode.mcbig.math.BigInteger l = QuartPos.fromBlock(j);
+                me.alphamode.mcbig.math.BigInteger i1 = QuartPos.fromBlock(k);
 
                 for(int j1 : aint) {
                     int k1 = QuartPos.fromBlock(j1);
-                    Holder<Biome> holder = this.getNoiseBiome(l, k1, i1, p_220583_);
+                    Holder<Biome> holder = this.getNoiseBiome(l, me.alphamode.mcbig.math.BigInteger.val(k1), i1, p_220583_);
                     if (set.contains(holder)) {
                         return Pair.of(new BlockPos(j, j1, k), holder);
                     }
@@ -105,9 +_,9 @@
 
     @Nullable
     public Pair<BlockPos, Holder<Biome>> findBiomeHorizontal(
-        int p_220561_,
+        me.alphamode.mcbig.math.BigInteger p_220561_,
         int p_220562_,
-        int p_220563_,
+        me.alphamode.mcbig.math.BigInteger p_220563_,
         int p_220564_,
         int p_220565_,
         Predicate<Holder<Biome>> p_220566_,
@@ -115,8 +_,8 @@
         boolean p_220568_,
         Climate.Sampler p_220569_
     ) {
-        int i = QuartPos.fromBlock(p_220561_);
-        int j = QuartPos.fromBlock(p_220563_);
+        me.alphamode.mcbig.math.BigInteger i = QuartPos.fromBlock(p_220561_);
+        me.alphamode.mcbig.math.BigInteger j = QuartPos.fromBlock(p_220563_);
         int k = QuartPos.fromBlock(p_220564_);
         int l = QuartPos.fromBlock(p_220562_);
         Pair<BlockPos, Holder<Biome>> pair = null;
@@ -135,9 +_,9 @@
                         }
                     }
 
-                    int k2 = i + i2;
-                    int j2 = j + l1;
-                    Holder<Biome> holder = this.getNoiseBiome(k2, l, j2, p_220569_);
+                    me.alphamode.mcbig.math.BigInteger k2 = i.add(i2);
+                    me.alphamode.mcbig.math.BigInteger j2 = j.add(l1);
+                    Holder<Biome> holder = this.getNoiseBiome(k2, me.alphamode.mcbig.math.BigInteger.val(l), j2, p_220569_);
                     if (p_220566_.test(holder)) {
                         if (pair == null || p_220567_.nextInt(i1 + 1) == 0) {
                             BlockPos blockpos = new BlockPos(QuartPos.toBlock(k2), p_220562_, QuartPos.toBlock(j2));
@@ -158,7 +_,7 @@
     }
 
     @Override
-    public abstract Holder<Biome> getNoiseBiome(int p_204238_, int p_204239_, int p_204240_, Climate.Sampler p_204241_);
+    public abstract Holder<Biome> getNoiseBiome(me.alphamode.mcbig.math.BigInteger p_204238_, me.alphamode.mcbig.math.BigInteger p_204239_, me.alphamode.mcbig.math.BigInteger p_204240_, Climate.Sampler p_204241_);
 
     public void addDebugInfo(List<String> p_207837_, BlockPos p_207838_, Climate.Sampler p_207839_) {
     }
