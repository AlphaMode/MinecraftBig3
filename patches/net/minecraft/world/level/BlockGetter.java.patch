--- a/net/minecraft/world/level/BlockGetter.java
+++ b/net/minecraft/world/level/BlockGetter.java
@@ -50,20 +_,21 @@
             p_151354_,
             (p_275154_, p_275155_) -> {
                 BlockState blockstate = this.getBlockState(p_275155_);
-                Vec3 vec3 = p_275154_.getFrom().subtract(p_275154_.getTo());
+                Vec3 vec3 = p_275154_.getFrom().subtract(p_275154_.getTo()).toVanilla();
                 return p_275154_.isTargetBlock().test(blockstate)
                     ? new BlockHitResult(p_275154_.getTo(), Direction.getNearest(vec3.x, vec3.y, vec3.z), BlockPos.containing(p_275154_.getTo()), false)
                     : null;
             },
             p_275156_ -> {
-                Vec3 vec3 = p_275156_.getFrom().subtract(p_275156_.getTo());
+                Vec3 vec3 = p_275156_.getFrom().subtract(p_275156_.getTo()).toVanilla();
                 return BlockHitResult.miss(p_275156_.getTo(), Direction.getNearest(vec3.x, vec3.y, vec3.z), BlockPos.containing(p_275156_.getTo()));
             }
         );
     }
 
     default BlockHitResult clip(ClipContext p_45548_) {
-        return traverseBlocks(p_45548_.getFrom(), p_45548_.getTo(), p_45548_, (p_151359_, p_151360_) -> {
+        Vec3 vec3 = p_45548_.getFrom().subtract(p_45548_.getTo()).toVanilla();
+        return BlockHitResult.miss(p_45548_.getTo(), Direction.getNearest(vec3.x, vec3.y, vec3.z), BlockPos.containing(p_45548_.getTo()));/*traverseBlocks(p_45548_.getFrom(), p_45548_.getTo(), p_45548_, (p_151359_, p_151360_) -> {
             BlockState blockstate = this.getBlockState(p_151360_);
             FluidState fluidstate = this.getFluidState(p_151360_);
             Vec3 vec3 = p_151359_.getFrom();
@@ -78,16 +_,16 @@
         }, p_275153_ -> {
             Vec3 vec3 = p_275153_.getFrom().subtract(p_275153_.getTo());
             return BlockHitResult.miss(p_275153_.getTo(), Direction.getNearest(vec3.x, vec3.y, vec3.z), BlockPos.containing(p_275153_.getTo()));
-        });
+        });*/
     }
 
     @Nullable
-    default BlockHitResult clipWithInteractionOverride(Vec3 p_45559_, Vec3 p_45560_, BlockPos p_45561_, VoxelShape p_45562_, BlockState p_45563_) {
+    default BlockHitResult clipWithInteractionOverride(me.alphamode.mcbig.core.BigVec3 p_45559_, me.alphamode.mcbig.core.BigVec3 p_45560_, BlockPos p_45561_, VoxelShape p_45562_, BlockState p_45563_) {
         BlockHitResult blockhitresult = p_45562_.clip(p_45559_, p_45560_, p_45561_);
         if (blockhitresult != null) {
             BlockHitResult blockhitresult1 = p_45563_.getInteractionShape(this, p_45561_).clip(p_45559_, p_45560_, p_45561_);
             if (blockhitresult1 != null
-                && blockhitresult1.getLocation().subtract(p_45559_).lengthSqr() < blockhitresult.getLocation().subtract(p_45559_).lengthSqr()) {
+                && blockhitresult1.getLocation().subtract(p_45559_).lengthSqr().compareTo(blockhitresult.getLocation().subtract(p_45559_).lengthSqr()) < 0) {
                 return blockhitresult.withDirection(blockhitresult1.getDirection());
             }
         }
@@ -111,27 +_,27 @@
         });
     }
 
-    static <T, C> T traverseBlocks(Vec3 p_151362_, Vec3 p_151363_, C p_151364_, BiFunction<C, BlockPos, T> p_151365_, Function<C, T> p_151366_) {
+    static <T, C> T traverseBlocks(me.alphamode.mcbig.core.BigVec3 p_151362_, me.alphamode.mcbig.core.BigVec3 p_151363_, C p_151364_, BiFunction<C, BlockPos, T> p_151365_, Function<C, T> p_151366_) {
         if (p_151362_.equals(p_151363_)) {
             return p_151366_.apply(p_151364_);
         } else {
-            double d0 = Mth.lerp(-1.0E-7, p_151363_.x, p_151362_.x);
+            me.alphamode.mcbig.math.BigDecimal d0 = Mth.lerp(-1.0E-7, p_151363_.x, p_151362_.x);
             double d1 = Mth.lerp(-1.0E-7, p_151363_.y, p_151362_.y);
-            double d2 = Mth.lerp(-1.0E-7, p_151363_.z, p_151362_.z);
-            double d3 = Mth.lerp(-1.0E-7, p_151362_.x, p_151363_.x);
+            me.alphamode.mcbig.math.BigDecimal d2 = Mth.lerp(-1.0E-7, p_151363_.z, p_151362_.z);
+            me.alphamode.mcbig.math.BigDecimal d3 = Mth.lerp(-1.0E-7, p_151362_.x, p_151363_.x);
             double d4 = Mth.lerp(-1.0E-7, p_151362_.y, p_151363_.y);
-            double d5 = Mth.lerp(-1.0E-7, p_151362_.z, p_151363_.z);
-            int i = Mth.floor(d3);
-            int j = Mth.floor(d4);
-            int k = Mth.floor(d5);
+            me.alphamode.mcbig.math.BigDecimal d5 = Mth.lerp(-1.0E-7, p_151362_.z, p_151363_.z);
+            me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(d3);
+            me.alphamode.mcbig.math.BigInteger j = Mth.bigFloor(d4);
+            me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(d5);
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos(i, j, k);
             T t = p_151365_.apply(p_151364_, blockpos$mutableblockpos);
             if (t != null) {
                 return t;
             } else {
-                double d6 = d0 - d3;
+                double d6 = d0.subtract(d3).doubleValue();
                 double d7 = d1 - d4;
-                double d8 = d2 - d5;
+                double d8 = d2.subtract(d5).doubleValue();
                 int l = Mth.sign(d6);
                 int i1 = Mth.sign(d7);
                 int j1 = Mth.sign(d8);
@@ -145,17 +_,17 @@
                 while(d12 <= 1.0 || d13 <= 1.0 || d14 <= 1.0) {
                     if (d12 < d13) {
                         if (d12 < d14) {
-                            i += l;
+                            i = i.add(l);
                             d12 += d9;
                         } else {
-                            k += j1;
+                            k = k.add(j1);
                             d14 += d11;
                         }
                     } else if (d13 < d14) {
-                        j += i1;
+                        j = j.add(i1);
                         d13 += d10;
                     } else {
-                        k += j1;
+                        k = k.add(j1);
                         d14 += d11;
                     }
 
