--- a/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -71,7 +_,7 @@
         int i = p_249264_.seaLevel();
         Aquifer.FluidStatus aquifer$fluidstatus1 = new Aquifer.FluidStatus(i, p_249264_.defaultFluid());
         Aquifer.FluidStatus aquifer$fluidstatus2 = new Aquifer.FluidStatus(DimensionType.MIN_Y * 2, Blocks.AIR.defaultBlockState());
-        return (p_224274_, p_224275_, p_224276_) -> p_224275_ < Math.min(-54, i) ? aquifer$fluidstatus : aquifer$fluidstatus1;
+        return (p_224274_, p_224275_, p_224276_) -> p_224275_.longValue() < Math.min(-54, i) ? aquifer$fluidstatus : aquifer$fluidstatus1;
     }
 
     @Override
@@ -115,13 +_,13 @@
     }
 
     @Override
-    public int getBaseHeight(int p_224216_, int p_224217_, Heightmap.Types p_224218_, LevelHeightAccessor p_224219_, RandomState p_224220_) {
+    public int getBaseHeight(me.alphamode.mcbig.math.BigInteger p_224216_, me.alphamode.mcbig.math.BigInteger p_224217_, Heightmap.Types p_224218_, LevelHeightAccessor p_224219_, RandomState p_224220_) {
         return this.iterateNoiseColumn(p_224219_, p_224220_, p_224216_, p_224217_, null, p_224218_.isOpaque())
             .orElse(p_224219_.getMinBuildHeight() + this.settings.value().bottomGenerationPadding());
     }
 
     @Override
-    public NoiseColumn getBaseColumn(int p_224211_, int p_224212_, LevelHeightAccessor p_224213_, RandomState p_224214_) {
+    public NoiseColumn getBaseColumn(me.alphamode.mcbig.math.BigInteger p_224211_, me.alphamode.mcbig.math.BigInteger p_224212_, LevelHeightAccessor p_224213_, RandomState p_224214_) {
         MutableObject<NoiseColumn> mutableobject = new MutableObject<>();
         this.iterateNoiseColumn(p_224213_, p_224214_, p_224211_, p_224212_, mutableobject, null);
         return mutableobject.getValue();
@@ -132,7 +_,7 @@
         DecimalFormat decimalformat = new DecimalFormat("0.000");
         NoiseRouter noiserouter = p_224305_.router();
         DensityFunction.SinglePointContext densityfunction$singlepointcontext = new DensityFunction.SinglePointContext(
-            p_224306_.getX(), p_224306_.getY(), p_224306_.getZ()
+            p_224306_.getBigX(), p_224306_.getY(), p_224306_.getBigZ()
         );
         double d0 = noiserouter.ridges().compute(densityfunction$singlepointcontext);
         p_224304_.add(
@@ -160,8 +_,8 @@
     private OptionalInt iterateNoiseColumn(
         LevelHeightAccessor p_224240_,
         RandomState p_224241_,
-        int p_224242_,
-        int p_224243_,
+        me.alphamode.mcbig.math.BigInteger p_224242_,
+        me.alphamode.mcbig.math.BigInteger p_224243_,
         @Nullable MutableObject<NoiseColumn> p_224244_,
         @Nullable Predicate<BlockState> p_224245_
     ) {
@@ -182,14 +_,14 @@
             }
 
             int i1 = noisesettings.getCellWidth();
-            int j1 = Math.floorDiv(p_224242_, i1);
-            int k1 = Math.floorDiv(p_224243_, i1);
-            int l1 = Math.floorMod(p_224242_, i1);
-            int i2 = Math.floorMod(p_224243_, i1);
-            int j2 = j1 * i1;
-            int k2 = k1 * i1;
-            double d0 = (double)l1 / (double)i1;
-            double d1 = (double)i2 / (double)i1;
+            me.alphamode.mcbig.math.BigInteger j1 = me.alphamode.mcbig.math.BigMath.floorDiv(p_224242_, i1);
+            me.alphamode.mcbig.math.BigInteger k1 = me.alphamode.mcbig.math.BigMath.floorDiv(p_224243_, i1);
+            me.alphamode.mcbig.math.BigInteger l1 = me.alphamode.mcbig.math.BigMath.floorMod(p_224242_, i1);
+            me.alphamode.mcbig.math.BigInteger i2 = me.alphamode.mcbig.math.BigMath.floorMod(p_224243_, i1);
+            me.alphamode.mcbig.math.BigInteger j2 = j1.multiply(i1);
+            me.alphamode.mcbig.math.BigInteger k2 = k1.multiply(i1);
+            double d0 = (double)l1.doubleValue() / (double)i1;
+            double d1 = (double)i2.doubleValue() / (double)i1;
             NoiseChunk noisechunk = new NoiseChunk(
                 1,
                 p_224241_,
@@ -298,13 +_,13 @@
 
         for(int j = -8; j <= 8; ++j) {
             for(int k = -8; k <= 8; ++k) {
-                ChunkPos chunkpos1 = new ChunkPos(chunkpos.x + j, chunkpos.z + k);
-                ChunkAccess chunkaccess = p_224224_.getChunk(chunkpos1.x, chunkpos1.z);
+                ChunkPos chunkpos1 = new ChunkPos(chunkpos.x().add(j), chunkpos.z().add(k));
+                ChunkAccess chunkaccess = p_224224_.getChunk(chunkpos1.x(), chunkpos1.z());
                 BiomeGenerationSettings biomegenerationsettings = chunkaccess.carverBiome(
                     () -> this.getBiomeGenerationSettings(
                             this.biomeSource
                                 .getNoiseBiome(
-                                    QuartPos.fromBlock(chunkpos1.getMinBlockX()), 0, QuartPos.fromBlock(chunkpos1.getMinBlockZ()), p_224226_.sampler()
+                                    QuartPos.fromBlock(chunkpos1.getBigMinBlockX()), me.alphamode.mcbig.math.BigInteger.ZERO, QuartPos.fromBlock(chunkpos1.getBigMinBlockZ()), p_224226_.sampler()
                                 )
                         )
                 );
@@ -313,7 +_,7 @@
 
                 for(Holder<ConfiguredWorldCarver<?>> holder : iterable) {
                     ConfiguredWorldCarver<?> configuredworldcarver = holder.value();
-                    worldgenrandom.setLargeFeatureSeed(p_224225_ + (long)l, chunkpos1.x, chunkpos1.z);
+                    worldgenrandom.setLargeFeatureSeed(p_224225_ + (long)l, chunkpos1.x().longValue(), chunkpos1.z().longValue());
                     if (configuredworldcarver.isStartChunk(worldgenrandom)) {
                         configuredworldcarver.carve(carvingcontext, p_224229_, biomemanager::getBiome, worldgenrandom, aquifer, chunkpos1, carvingmask);
                     }
@@ -362,8 +_,8 @@
         Heightmap heightmap = p_224288_.getOrCreateHeightmapUnprimed(Heightmap.Types.OCEAN_FLOOR_WG);
         Heightmap heightmap1 = p_224288_.getOrCreateHeightmapUnprimed(Heightmap.Types.WORLD_SURFACE_WG);
         ChunkPos chunkpos = p_224288_.getPos();
-        int i = chunkpos.getMinBlockX();
-        int j = chunkpos.getMinBlockZ();
+        me.alphamode.mcbig.math.BigInteger i = chunkpos.getBigMinBlockX();
+        me.alphamode.mcbig.math.BigInteger j = chunkpos.getBigMinBlockZ();
         Aquifer aquifer = noisechunk.aquifer();
         noisechunk.initializeForFirstCellX();
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
@@ -395,14 +_,14 @@
                         noisechunk.updateForY(l2, d0);
 
                         for(int k3 = 0; k3 < k; ++k3) {
-                            int l3 = i + k1 * k + k3;
-                            int i4 = l3 & 15;
+                            me.alphamode.mcbig.math.BigInteger l3 = i.add(k1 * k + k3);
+                            int i4 = l3.and(me.alphamode.mcbig.core.BigConstants.Ints.FIFTEEN).intValue();
                             double d1 = (double)k3 / (double)k;
                             noisechunk.updateForX(l3, d1);
 
                             for(int j4 = 0; j4 < k; ++j4) {
-                                int k4 = j + l1 * k + j4;
-                                int l4 = k4 & 15;
+                                me.alphamode.mcbig.math.BigInteger k4 = j.add(l1 * k + j4);
+                                int l4 = k4.and(me.alphamode.mcbig.core.BigConstants.Ints.FIFTEEN).intValue();
                                 double d2 = (double)j4 / (double)k;
                                 noisechunk.updateForZ(k4, d2);
                                 BlockState blockstate = noisechunk.getInterpolatedState();
@@ -416,7 +_,7 @@
                                     heightmap.update(i4, l2, l4, blockstate);
                                     heightmap1.update(i4, l2, l4, blockstate);
                                     if (aquifer.shouldScheduleFluidUpdate() && !blockstate.getFluidState().isEmpty()) {
-                                        blockpos$mutableblockpos.set(l3, l2, k4);
+                                        blockpos$mutableblockpos.set(l3, me.alphamode.mcbig.math.BigInteger.val(l2), k4);
                                         p_224288_.markPosForPostprocessing(blockpos$mutableblockpos);
                                     }
                                 }
@@ -433,7 +_,7 @@
         return p_224288_;
     }
 
-    private BlockState debugPreliminarySurfaceLevel(NoiseChunk p_198232_, int p_198233_, int p_198234_, int p_198235_, BlockState p_198236_) {
+    private BlockState debugPreliminarySurfaceLevel(NoiseChunk p_198232_, me.alphamode.mcbig.math.BigInteger p_198233_, int p_198234_, me.alphamode.mcbig.math.BigInteger p_198235_, BlockState p_198236_) {
         return p_198236_;
     }
 
@@ -458,7 +_,7 @@
             ChunkPos chunkpos = p_64379_.getCenter();
             Holder<Biome> holder = p_64379_.getBiome(chunkpos.getWorldPosition().atY(p_64379_.getMaxBuildHeight() - 1));
             WorldgenRandom worldgenrandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.generateUniqueSeed()));
-            worldgenrandom.setDecorationSeed(p_64379_.getSeed(), chunkpos.getMinBlockX(), chunkpos.getMinBlockZ());
+            worldgenrandom.setDecorationSeed(p_64379_.getSeed(), chunkpos.getBigMinBlockX(), chunkpos.getBigMinBlockZ());
             NaturalSpawner.spawnMobsForChunkGeneration(p_64379_, holder, chunkpos, worldgenrandom);
         }
     }
