--- a/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
+++ b/net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
@@ -15,7 +_,7 @@
     protected int heightPosition = -1;
 
     protected ScatteredFeaturePiece(
-        StructurePieceType p_209920_, int p_209921_, int p_209922_, int p_209923_, int p_209924_, int p_209925_, int p_209926_, Direction p_209927_
+        StructurePieceType p_209920_, me.alphamode.mcbig.math.BigInteger p_209921_, int p_209922_, me.alphamode.mcbig.math.BigInteger p_209923_, int p_209924_, int p_209925_, int p_209926_, Direction p_209927_
     ) {
         super(p_209920_, 0, StructurePiece.makeBoundingBox(p_209921_, p_209922_, p_209923_, p_209927_, p_209924_, p_209925_, p_209926_));
         this.width = p_209924_;
@@ -48,8 +_,8 @@
             int j = 0;
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for(int k = this.boundingBox.minZ(); k <= this.boundingBox.maxZ(); ++k) {
-                for(int l = this.boundingBox.minX(); l <= this.boundingBox.maxX(); ++l) {
+            for(me.alphamode.mcbig.math.BigInteger k = this.boundingBox.minZ(); k.compareTo(this.boundingBox.maxZ()) <= 0; k = k.add()) {
+                for(me.alphamode.mcbig.math.BigInteger l = this.boundingBox.minX(); l.compareTo(this.boundingBox.maxX()) <= 0; l = l.add()) {
                     blockpos$mutableblockpos.set(l, 64, k);
                     if (p_72805_.isInside(blockpos$mutableblockpos)) {
                         i += p_72804_.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockpos$mutableblockpos).getY();
@@ -62,7 +_,7 @@
                 return false;
             } else {
                 this.heightPosition = i / j;
-                this.boundingBox.move(0, this.heightPosition - this.boundingBox.minY() + p_72806_, 0);
+                this.boundingBox.move(me.alphamode.mcbig.math.BigInteger.ZERO, me.alphamode.mcbig.math.BigInteger.val(this.heightPosition).subtract(this.boundingBox.minY()).add(p_72806_), me.alphamode.mcbig.math.BigInteger.ZERO);
                 return true;
             }
         }
@@ -76,8 +_,8 @@
             boolean flag = false;
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for(int j = this.boundingBox.minZ(); j <= this.boundingBox.maxZ(); ++j) {
-                for(int k = this.boundingBox.minX(); k <= this.boundingBox.maxX(); ++k) {
+            for(me.alphamode.mcbig.math.BigInteger j = this.boundingBox.minZ(); j.compareTo(this.boundingBox.maxZ()) <= 0; j = j.add()) {
+                for(me.alphamode.mcbig.math.BigInteger k = this.boundingBox.minX(); k.compareTo(this.boundingBox.maxX()) <= 0; k = k.add()) {
                     blockpos$mutableblockpos.set(k, 0, j);
                     i = Math.min(i, p_192468_.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockpos$mutableblockpos).getY());
                     flag = true;
@@ -88,7 +_,7 @@
                 return false;
             } else {
                 this.heightPosition = i;
-                this.boundingBox.move(0, this.heightPosition - this.boundingBox.minY() + p_192469_, 0);
+                this.boundingBox.move(me.alphamode.mcbig.math.BigInteger.ZERO, me.alphamode.mcbig.math.BigInteger.val(this.heightPosition).subtract(this.boundingBox.minY()).add(p_192469_), me.alphamode.mcbig.math.BigInteger.ZERO);
                 return true;
             }
         }
