--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -87,10 +_,10 @@
             List<StructureTemplate.StructureBlockInfo> list1 = Lists.newArrayList();
             List<StructureTemplate.StructureBlockInfo> list2 = Lists.newArrayList();
             BlockPos blockpos1 = new BlockPos(
-                Math.min(p_163804_.getX(), blockpos.getX()), Math.min(p_163804_.getY(), blockpos.getY()), Math.min(p_163804_.getZ(), blockpos.getZ())
+                p_163804_.getBigX().min(blockpos.getBigX()), p_163804_.getBigY().min(blockpos.getBigY()), p_163804_.getBigZ().min(blockpos.getBigZ())
             );
             BlockPos blockpos2 = new BlockPos(
-                Math.max(p_163804_.getX(), blockpos.getX()), Math.max(p_163804_.getY(), blockpos.getY()), Math.max(p_163804_.getZ(), blockpos.getZ())
+                p_163804_.getBigX().max(blockpos.getBigX()), p_163804_.getBigY().max(blockpos.getBigY()), p_163804_.getBigZ().max(blockpos.getBigZ())
             );
             this.size = p_163805_;
 
@@ -163,7 +_,7 @@
         this.entityInfoList.clear();
 
         for(Entity entity : list) {
-            Vec3 vec3 = new Vec3(entity.getX() - (double)p_74502_.getX(), entity.getY() - (double)p_74502_.getY(), entity.getZ() - (double)p_74502_.getZ());
+            Vec3 vec3 = new Vec3(entity.getX() - (double)p_74502_.getBigX().doubleValue(), entity.getY() - (double)p_74502_.getBigY().doubleValue(), entity.getZ() - (double)p_74502_.getBigZ().doubleValue());
             CompoundTag compoundtag = new CompoundTag();
             entity.save(compoundtag);
             BlockPos blockpos;
@@ -232,12 +_,12 @@
                 List<BlockPos> list1 = Lists.newArrayListWithCapacity(p_230332_.shouldKeepLiquids() ? list.size() : 0);
                 List<BlockPos> list2 = Lists.newArrayListWithCapacity(p_230332_.shouldKeepLiquids() ? list.size() : 0);
                 List<Pair<BlockPos, CompoundTag>> list3 = Lists.newArrayListWithCapacity(list.size());
-                int i = Integer.MAX_VALUE;
-                int j = Integer.MAX_VALUE;
-                int k = Integer.MAX_VALUE;
-                int l = Integer.MIN_VALUE;
-                int i1 = Integer.MIN_VALUE;
-                int j1 = Integer.MIN_VALUE;
+                me.alphamode.mcbig.math.BigInteger i = me.alphamode.mcbig.math.BigInteger.val(Integer.MAX_VALUE);
+                me.alphamode.mcbig.math.BigInteger j = me.alphamode.mcbig.math.BigInteger.val(Integer.MAX_VALUE);
+                me.alphamode.mcbig.math.BigInteger k = me.alphamode.mcbig.math.BigInteger.val(Integer.MAX_VALUE);
+                me.alphamode.mcbig.math.BigInteger l = me.alphamode.mcbig.math.BigInteger.val(Integer.MIN_VALUE);
+                me.alphamode.mcbig.math.BigInteger i1 = me.alphamode.mcbig.math.BigInteger.val(Integer.MIN_VALUE);
+                me.alphamode.mcbig.math.BigInteger j1 = me.alphamode.mcbig.math.BigInteger.val(Integer.MIN_VALUE);
 
                 for(StructureTemplate.StructureBlockInfo structuretemplate$structureblockinfo : processBlockInfos(
                     p_230329_, p_230330_, p_230331_, p_230332_, list
@@ -253,12 +_,12 @@
                         }
 
                         if (p_230329_.setBlock(blockpos, blockstate, p_230334_)) {
-                            i = Math.min(i, blockpos.getX());
-                            j = Math.min(j, blockpos.getY());
-                            k = Math.min(k, blockpos.getZ());
-                            l = Math.max(l, blockpos.getX());
-                            i1 = Math.max(i1, blockpos.getY());
-                            j1 = Math.max(j1, blockpos.getZ());
+                            i = i.min(blockpos.getBigX());
+                            j = j.min(blockpos.getBigY());
+                            k = k.min(blockpos.getBigZ());
+                            l = l.max(blockpos.getBigX());
+                            i1 = i1.max(blockpos.getBigY());
+                            j1 = j1.max(blockpos.getBigZ());
                             list3.add(Pair.of(blockpos, structuretemplate$structureblockinfo.nbt));
                             if (structuretemplate$structureblockinfo.nbt != null) {
                                 BlockEntity blockentity1 = p_230329_.getBlockEntity(blockpos);
@@ -316,16 +_,16 @@
                     }
                 }
 
-                if (i <= l) {
+                if (i.compareTo(l) <= 0) {
                     if (!p_230332_.getKnownShape()) {
-                        DiscreteVoxelShape discretevoxelshape = new BitSetDiscreteVoxelShape(l - i + 1, i1 - j + 1, j1 - k + 1);
-                        int k1 = i;
-                        int l1 = j;
-                        int j2 = k;
+                        DiscreteVoxelShape discretevoxelshape = new BitSetDiscreteVoxelShape(l.subtract(i).add().intValue(), i1.subtract(j).add().intValue(), j1.subtract(k).add().intValue());
+                        me.alphamode.mcbig.math.BigInteger k1 = i;
+                        me.alphamode.mcbig.math.BigInteger l1 = j;
+                        me.alphamode.mcbig.math.BigInteger j2 = k;
 
                         for(Pair<BlockPos, CompoundTag> pair1 : list3) {
                             BlockPos blockpos2 = pair1.getFirst();
-                            discretevoxelshape.fill(blockpos2.getX() - k1, blockpos2.getY() - l1, blockpos2.getZ() - j2);
+                            discretevoxelshape.fill(blockpos2.getBigX().subtract(k1).intValue(), blockpos2.getBigY().subtract(l1).intValue(), blockpos2.getBigZ().subtract(j2).intValue());
                         }
 
                         updateShapeAtEdge(p_230329_, p_230334_, discretevoxelshape, k1, l1, j2);
@@ -371,9 +_,9 @@
         }
     }
 
-    public static void updateShapeAtEdge(LevelAccessor p_74511_, int p_74512_, DiscreteVoxelShape p_74513_, int p_74514_, int p_74515_, int p_74516_) {
+    public static void updateShapeAtEdge(LevelAccessor p_74511_, int p_74512_, DiscreteVoxelShape p_74513_, me.alphamode.mcbig.math.BigInteger p_74514_, me.alphamode.mcbig.math.BigInteger p_74515_, me.alphamode.mcbig.math.BigInteger p_74516_) {
         p_74513_.forAllFaces((p_74494_, p_74495_, p_74496_, p_74497_) -> {
-            BlockPos blockpos = new BlockPos(p_74514_ + p_74495_, p_74515_ + p_74496_, p_74516_ + p_74497_);
+            BlockPos blockpos = new BlockPos(p_74514_.add(p_74495_), p_74515_.add(p_74496_), p_74516_.add(p_74497_));
             BlockPos blockpos1 = blockpos.relative(p_74494_);
             BlockState blockstate = p_74511_.getBlockState(blockpos);
             BlockState blockstate1 = p_74511_.getBlockState(blockpos1);
@@ -440,7 +_,7 @@
             if (p_74529_ == null || p_74529_.isInside(blockpos)) {
                 CompoundTag compoundtag = structuretemplate$structureentityinfo.nbt.copy();
                 Vec3 vec3 = transform(structuretemplate$structureentityinfo.pos, p_74526_, p_74527_, p_74528_);
-                Vec3 vec31 = vec3.add((double)p_74525_.getX(), (double)p_74525_.getY(), (double)p_74525_.getZ());
+                Vec3 vec31 = vec3.add((double)p_74525_.getBigX().doubleValue(), (double)p_74525_.getBigY().doubleValue(), (double)p_74525_.getBigZ().doubleValue());
                 ListTag listtag = new ListTag();
                 listtag.add(DoubleTag.valueOf(vec31.x));
                 listtag.add(DoubleTag.valueOf(vec31.y));
@@ -486,30 +_,30 @@
     }
 
     public static BlockPos transform(BlockPos p_74594_, Mirror p_74595_, Rotation p_74596_, BlockPos p_74597_) {
-        int i = p_74594_.getX();
-        int j = p_74594_.getY();
-        int k = p_74594_.getZ();
+        me.alphamode.mcbig.math.BigInteger i = p_74594_.getBigX();
+        me.alphamode.mcbig.math.BigInteger j = p_74594_.getBigY();
+        me.alphamode.mcbig.math.BigInteger k = p_74594_.getBigZ();
         boolean flag = true;
         switch(p_74595_) {
             case LEFT_RIGHT:
-                k = -k;
+                k = k.negate();
                 break;
             case FRONT_BACK:
-                i = -i;
+                i = i.negate();
                 break;
             default:
                 flag = false;
         }
 
-        int l = p_74597_.getX();
-        int i1 = p_74597_.getZ();
+        me.alphamode.mcbig.math.BigInteger l = p_74597_.getBigX();
+        me.alphamode.mcbig.math.BigInteger i1 = p_74597_.getBigZ();
         switch(p_74596_) {
             case COUNTERCLOCKWISE_90:
-                return new BlockPos(l - i1 + k, j, l + i1 - i);
+                return new BlockPos(l.subtract(i1).add(k), j, l.add(i1).subtract(i));
             case CLOCKWISE_90:
-                return new BlockPos(l + i1 - k, j, i1 - l + i);
+                return new BlockPos(l.add(i1).subtract(k), j, i1.subtract(l).add(i));
             case CLOCKWISE_180:
-                return new BlockPos(l + l - i, j, i1 + i1 - k);
+                return new BlockPos(l.add(l).subtract(i), j, i1.add(i1).subtract(k));
             default:
                 return flag ? new BlockPos(i, j, k) : p_74594_;
         }
@@ -531,15 +_,15 @@
                 flag = false;
         }
 
-        int i = p_74582_.getX();
-        int j = p_74582_.getZ();
+        me.alphamode.mcbig.math.BigInteger i = p_74582_.getBigX();
+        me.alphamode.mcbig.math.BigInteger j = p_74582_.getBigZ();
         switch(p_74581_) {
             case COUNTERCLOCKWISE_90:
-                return new Vec3((double)(i - j) + d2, d1, (double)(i + j + 1) - d0);
+                return new Vec3((double)(i.subtract(j)).doubleValue() + d2, d1, (double)(i.add(j).add()).doubleValue() - d0);
             case CLOCKWISE_90:
-                return new Vec3((double)(i + j + 1) - d2, d1, (double)(j - i) + d0);
+                return new Vec3((double)(i.add(j).add()).doubleValue() - d2, d1, (double)(j.subtract(i)).doubleValue() + d0);
             case CLOCKWISE_180:
-                return new Vec3((double)(i + i + 1) - d0, d1, (double)(j + j + 1) - d2);
+                return new Vec3((double)(i.add(i).add()).doubleValue() - d0, d1, (double)(j.add(j).add()).doubleValue() - d2);
             default:
                 return flag ? new Vec3(d0, d1, d2) : p_74579_;
         }
