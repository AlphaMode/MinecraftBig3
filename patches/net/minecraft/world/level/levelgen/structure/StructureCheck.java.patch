--- a/net/minecraft/world/level/levelgen/structure/StructureCheck.java
+++ b/net/minecraft/world/level/levelgen/structure/StructureCheck.java
@@ -49,8 +_,8 @@
     private final BiomeSource biomeSource;
     private final long seed;
     private final DataFixer fixerUpper;
-    private final Long2ObjectMap<Object2IntMap<Structure>> loadedChunks = new Long2ObjectOpenHashMap<>();
-    private final Map<Structure, Long2BooleanMap> featureChecks = new HashMap<>();
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectMap<ChunkPos, Object2IntMap<Structure>> loadedChunks = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
+    private final Map<Structure, it.unimi.dsi.fastutil.objects.Object2BooleanMap<ChunkPos>> featureChecks = new HashMap<>();
 
     public StructureCheck(
         ChunkScanAccess p_226712_,
@@ -77,20 +_,20 @@
     }
 
     public StructureCheckResult checkStart(ChunkPos p_226730_, Structure p_226731_, StructurePlacement p_321610_, boolean p_226732_) {
-        long i = p_226730_.toLong();
-        Object2IntMap<Structure> object2intmap = this.loadedChunks.get(i);
+//        long i = p_226730_.toLong();
+        Object2IntMap<Structure> object2intmap = this.loadedChunks.get(p_226730_);
         if (object2intmap != null) {
             return this.checkStructureInfo(object2intmap, p_226731_, p_226732_);
         } else {
-            StructureCheckResult structurecheckresult = this.tryLoadFromStorage(p_226730_, p_226731_, p_226732_, i);
+            StructureCheckResult structurecheckresult = this.tryLoadFromStorage(p_226730_, p_226731_, p_226732_, p_226730_);
             if (structurecheckresult != null) {
                 return structurecheckresult;
-            } else if (!p_321610_.applyAdditionalChunkRestrictions(p_226730_.x, p_226730_.z, this.seed)) {
+            } else if (!p_321610_.applyAdditionalChunkRestrictions(p_226730_.x(), p_226730_.z(), this.seed)) {
                 return StructureCheckResult.START_NOT_PRESENT;
             } else {
                 boolean flag = this.featureChecks
-                    .computeIfAbsent(p_226731_, p_226739_ -> new Long2BooleanOpenHashMap())
-                    .computeIfAbsent(i, p_226728_ -> this.canCreateStructure(p_226730_, p_226731_));
+                    .computeIfAbsent(p_226731_, p_226739_ -> new it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap<>())
+                    .computeIfAbsent(p_226730_, p_226728_ -> this.canCreateStructure(p_226730_, p_226731_));
                 return !flag ? StructureCheckResult.START_NOT_PRESENT : StructureCheckResult.CHUNK_LOAD_NEEDED;
             }
         }
@@ -115,7 +_,7 @@
     }
 
     @Nullable
-    private StructureCheckResult tryLoadFromStorage(ChunkPos p_226734_, Structure p_226735_, boolean p_226736_, long p_226737_) {
+    private StructureCheckResult tryLoadFromStorage(ChunkPos p_226734_, Structure p_226735_, boolean p_226736_, ChunkPos p_226737_) {
         CollectFields collectfields = new CollectFields(
             new FieldSelector(IntTag.TYPE, "DataVersion"),
             new FieldSelector("Level", "Structures", CompoundTag.TYPE, "Starts"),
@@ -208,26 +_,26 @@
     }
 
     public void onStructureLoad(ChunkPos p_197283_, Map<Structure, StructureStart> p_197284_) {
-        long i = p_197283_.toLong();
+//        long i = p_197283_.toLong();
         Object2IntMap<Structure> object2intmap = new Object2IntOpenHashMap<>();
         p_197284_.forEach((p_226749_, p_226750_) -> {
             if (p_226750_.isValid()) {
                 object2intmap.put(p_226749_, p_226750_.getReferences());
             }
         });
-        this.storeFullResults(i, object2intmap);
+        this.storeFullResults(p_197283_, object2intmap);
     }
 
-    private void storeFullResults(long p_197264_, Object2IntMap<Structure> p_197265_) {
+    private void storeFullResults(ChunkPos p_197264_, Object2IntMap<Structure> p_197265_) {
         this.loadedChunks.put(p_197264_, deduplicateEmptyMap(p_197265_));
-        this.featureChecks.values().forEach(p_209956_ -> p_209956_.remove(p_197264_));
+        this.featureChecks.values().forEach(p_209956_ -> p_209956_.removeBoolean(p_197264_));
     }
 
     public void incrementReference(ChunkPos p_226723_, Structure p_226724_) {
         this.loadedChunks
             .compute(
-                p_226723_.toLong(),
-                (BiFunction<? super Long, ? super Object2IntMap<Structure>, ? extends Object2IntMap<Structure>>)((p_226745_, p_226746_) -> {
+                p_226723_,
+                (BiFunction<? super ChunkPos, ? super Object2IntMap<Structure>, ? extends Object2IntMap<Structure>>)((p_226745_, p_226746_) -> {
                     if (p_226746_ == null || p_226746_.isEmpty()) {
                         p_226746_ = new Object2IntOpenHashMap<>();
                     }
