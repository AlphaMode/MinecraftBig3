--- a/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/net/minecraft/world/level/levelgen/Beardifier.java
@@ -33,8 +_,8 @@
     private final ObjectListIterator<JigsawJunction> junctionIterator;
 
     public static Beardifier forStructuresInChunk(StructureManager p_223938_, ChunkPos p_223939_) {
-        int i = p_223939_.getMinBlockX();
-        int j = p_223939_.getMinBlockZ();
+        me.alphamode.mcbig.math.BigInteger i = p_223939_.getBigMinBlockX();
+        me.alphamode.mcbig.math.BigInteger j = p_223939_.getBigMinBlockZ();
         ObjectList<Beardifier.Rigid> objectlist = new ObjectArrayList<>(10);
         ObjectList<JigsawJunction> objectlist1 = new ObjectArrayList<>(32);
         p_223938_.startsForStructure(p_223939_, p_223941_ -> p_223941_.terrainAdaptation() != TerrainAdjustment.NONE)
@@ -55,9 +_,9 @@
                                 }
         
                                 for(JigsawJunction jigsawjunction : poolelementstructurepiece.getJunctions()) {
-                                    int k = jigsawjunction.getSourceX();
-                                    int l = jigsawjunction.getSourceZ();
-                                    if (k > i - 12 && l > j - 12 && k < i + 15 + 12 && l < j + 15 + 12) {
+                                    me.alphamode.mcbig.math.BigInteger k = jigsawjunction.getSourceX();
+                                    me.alphamode.mcbig.math.BigInteger l = jigsawjunction.getSourceZ();
+                                    if (k.compareTo(i.subtract(me.alphamode.mcbig.core.BigConstants.Ints.TWELVE)) > 0 && l.compareTo(j.subtract(me.alphamode.mcbig.core.BigConstants.Ints.TWELVE)) > 0 && k.compareTo(i.add(me.alphamode.mcbig.core.BigConstants.Ints.FIFTEEN).add(me.alphamode.mcbig.core.BigConstants.Ints.TWELVE)) < 0 && l.compareTo(j.add(me.alphamode.mcbig.core.BigConstants.Ints.FIFTEEN).add(me.alphamode.mcbig.core.BigConstants.Ints.TWELVE)) < 0) {
                                         objectlist1.add(jigsawjunction);
                                     }
                                 }
@@ -79,9 +_,9 @@
 
     @Override
     public double compute(DensityFunction.FunctionContext p_208200_) {
-        int i = p_208200_.blockX();
+        me.alphamode.mcbig.math.BigInteger i = p_208200_.blockX();
         int j = p_208200_.blockY();
-        int k = p_208200_.blockZ();
+        me.alphamode.mcbig.math.BigInteger k = p_208200_.blockZ();
 
         double d0;
         double d1;
@@ -89,16 +_,16 @@
             Beardifier.Rigid beardifier$rigid = this.pieceIterator.next();
             BoundingBox boundingbox = beardifier$rigid.box();
             int l = beardifier$rigid.groundLevelDelta();
-            int i1 = Math.max(0, Math.max(boundingbox.minX() - i, i - boundingbox.maxX()));
-            int j1 = Math.max(0, Math.max(boundingbox.minZ() - k, k - boundingbox.maxZ()));
-            int k1 = boundingbox.minY() + l;
+            int i1 = me.alphamode.mcbig.math.BigInteger.ZERO.max(boundingbox.minX().subtract(i).max(i.subtract(boundingbox.maxX()))).intValue();
+            int j1 = me.alphamode.mcbig.math.BigInteger.ZERO.max(boundingbox.minZ().subtract(k).max(k.subtract(boundingbox.maxZ()))).intValue();
+            int k1 = boundingbox.minY().intValue() + l;
             int l1 = j - k1;
 
             int i2 = switch(beardifier$rigid.terrainAdjustment()) {
                 case NONE -> 0;
                 case BURY, BEARD_THIN -> l1;
-                case BURY_PROPER -> Math.max(0, Math.max(boundingbox.minY() - j, j - boundingbox.maxY()));
-                case BEARD_BOX -> Math.max(0, Math.max(k1 - j, j - boundingbox.maxY()));
+                case BURY_PROPER -> Math.max(0, Math.max(boundingbox.minY().intValue() - j, j - boundingbox.maxY().intValue()));
+                case BEARD_BOX -> Math.max(0, Math.max(k1 - j, j - boundingbox.maxY().intValue()));
             };
             switch(beardifier$rigid.terrainAdjustment()) {
                 case NONE:
@@ -123,9 +_,9 @@
 
         while(this.junctionIterator.hasNext()) {
             JigsawJunction jigsawjunction = this.junctionIterator.next();
-            int j2 = i - jigsawjunction.getSourceX();
+            int j2 = i.subtract(jigsawjunction.getSourceX()).intValue();
             int k2 = j - jigsawjunction.getSourceGroundY();
-            int l2 = k - jigsawjunction.getSourceZ();
+            int l2 = k.subtract(jigsawjunction.getSourceZ()).intValue();
             d0 += getBeardContribution(j2, k2, l2, k2) * 0.4;
         }
 
