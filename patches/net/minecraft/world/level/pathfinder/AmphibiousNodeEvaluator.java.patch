--- a/net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator.java
@@ -52,7 +_,7 @@
     @Override
     public int getNeighbors(Node[] p_164676_, Node p_164677_) {
         int i = super.getNeighbors(p_164676_, p_164677_);
-        PathType pathtype = this.getCachedPathType(p_164677_.x, p_164677_.y + 1, p_164677_.z);
+        PathType pathtype = this.getCachedPathType(p_164677_.x, p_164677_.y.add(), p_164677_.z);
         PathType pathtype1 = this.getCachedPathType(p_164677_.x, p_164677_.y, p_164677_.z);
         int j;
         if (this.mob.getPathfindingMalus(pathtype) >= 0.0F && pathtype1 != PathType.STICKY_HONEY) {
@@ -62,8 +_,8 @@
         }
 
         double d0 = this.getFloorLevel(new BlockPos(p_164677_.x, p_164677_.y, p_164677_.z));
-        Node node = this.findAcceptedNode(p_164677_.x, p_164677_.y + 1, p_164677_.z, Math.max(0, j - 1), d0, Direction.UP, pathtype1);
-        Node node1 = this.findAcceptedNode(p_164677_.x, p_164677_.y - 1, p_164677_.z, j, d0, Direction.DOWN, pathtype1);
+        Node node = this.findAcceptedNode(p_164677_.x, p_164677_.y.add(), p_164677_.z, Math.max(0, j - 1), d0, Direction.UP, pathtype1);
+        Node node1 = this.findAcceptedNode(p_164677_.x, p_164677_.y.subtract(), p_164677_.z, j, d0, Direction.DOWN, pathtype1);
         if (this.isVerticalNeighborValid(node, p_164677_)) {
             p_164676_[i++] = node;
         }
@@ -74,7 +_,7 @@
 
         for(int k = 0; k < i; ++k) {
             Node node2 = p_164676_[k];
-            if (node2.type == PathType.WATER && this.prefersShallowSwimming && node2.y < this.mob.level().getSeaLevel() - 10) {
+            if (node2.type == PathType.WATER && this.prefersShallowSwimming && node2.y.longValue() < this.mob.level().getSeaLevel() - 10) {
                 ++node2.costMalus;
             }
         }
@@ -92,7 +_,7 @@
     }
 
     @Override
-    public PathType getPathType(PathfindingContext p_330489_, int p_164667_, int p_164668_, int p_164669_) {
+    public PathType getPathType(PathfindingContext p_330489_, me.alphamode.mcbig.math.BigInteger p_164667_, me.alphamode.mcbig.math.BigInteger p_164668_, me.alphamode.mcbig.math.BigInteger p_164669_) {
         PathType pathtype = p_330489_.getPathTypeFromState(p_164667_, p_164668_, p_164669_);
         if (pathtype == PathType.WATER) {
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
@@ -100,7 +_,7 @@
             for(Direction direction : Direction.values()) {
                 blockpos$mutableblockpos.set(p_164667_, p_164668_, p_164669_).move(direction);
                 PathType pathtype1 = p_330489_.getPathTypeFromState(
-                    blockpos$mutableblockpos.getX(), blockpos$mutableblockpos.getY(), blockpos$mutableblockpos.getZ()
+                    blockpos$mutableblockpos.getBigX(), blockpos$mutableblockpos.getBigY(), blockpos$mutableblockpos.getBigZ()
                 );
                 if (pathtype1 == PathType.BLOCKED) {
                     return PathType.WATER_BORDER;
