--- a/net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/AmphibiousNodeEvaluator.java
@@ -40,20 +_,20 @@
             ? super.getStart()
             : this.getStartNode(
                 new BlockPos(
-                    Mth.floor(this.mob.getBoundingBox().minX), Mth.floor(this.mob.getBoundingBox().minY + 0.5), Mth.floor(this.mob.getBoundingBox().minZ)
+                    Mth.bigFloor(this.mob.getBoundingBox().minX), Mth.bigFloor(this.mob.getBoundingBox().minY + 0.5), Mth.bigFloor(this.mob.getBoundingBox().minZ)
                 )
             );
     }
 
     @Override
     public Target getGoal(double p_164662_, double p_164663_, double p_164664_) {
-        return this.getTargetFromNode(this.getNode(Mth.floor(p_164662_), Mth.floor(p_164663_ + 0.5), Mth.floor(p_164664_)));
+        return this.getTargetFromNode(this.getNode(Mth.bigFloor(p_164662_), Mth.bigFloor(p_164663_ + 0.5), Mth.bigFloor(p_164664_)));
     }
 
     @Override
     public int getNeighbors(Node[] p_164676_, Node p_164677_) {
         int i = super.getNeighbors(p_164676_, p_164677_);
-        BlockPathTypes blockpathtypes = this.getCachedBlockType(this.mob, p_164677_.x, p_164677_.y + 1, p_164677_.z);
+        BlockPathTypes blockpathtypes = this.getCachedBlockType(this.mob, p_164677_.x, p_164677_.y.add(), p_164677_.z);
         BlockPathTypes blockpathtypes1 = this.getCachedBlockType(this.mob, p_164677_.x, p_164677_.y, p_164677_.z);
         int j;
         if (this.mob.getPathfindingMalus(blockpathtypes) >= 0.0F && blockpathtypes1 != BlockPathTypes.STICKY_HONEY) {
@@ -63,8 +_,8 @@
         }
 
         double d0 = this.getFloorLevel(new BlockPos(p_164677_.x, p_164677_.y, p_164677_.z));
-        Node node = this.findAcceptedNode(p_164677_.x, p_164677_.y + 1, p_164677_.z, Math.max(0, j - 1), d0, Direction.UP, blockpathtypes1);
-        Node node1 = this.findAcceptedNode(p_164677_.x, p_164677_.y - 1, p_164677_.z, j, d0, Direction.DOWN, blockpathtypes1);
+        Node node = this.findAcceptedNode(p_164677_.x, p_164677_.y.add(), p_164677_.z, Math.max(0, j - 1), d0, Direction.UP, blockpathtypes1);
+        Node node1 = this.findAcceptedNode(p_164677_.x, p_164677_.y.subtract(), p_164677_.z, j, d0, Direction.DOWN, blockpathtypes1);
         if (this.isVerticalNeighborValid(node, p_164677_)) {
             p_164676_[i++] = node;
         }
@@ -75,7 +_,7 @@
 
         for(int k = 0; k < i; ++k) {
             Node node2 = p_164676_[k];
-            if (node2.type == BlockPathTypes.WATER && this.prefersShallowSwimming && node2.y < this.mob.level().getSeaLevel() - 10) {
+            if (node2.type == BlockPathTypes.WATER && this.prefersShallowSwimming && node2.y.longValue() < this.mob.level().getSeaLevel() - 10) {
                 ++node2.costMalus;
             }
         }
@@ -93,7 +_,7 @@
     }
 
     @Override
-    public BlockPathTypes getBlockPathType(BlockGetter p_164666_, int p_164667_, int p_164668_, int p_164669_) {
+    public BlockPathTypes getBlockPathType(BlockGetter p_164666_, me.alphamode.mcbig.math.BigInteger p_164667_, me.alphamode.mcbig.math.BigInteger p_164668_, me.alphamode.mcbig.math.BigInteger p_164669_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
         BlockPathTypes blockpathtypes = getBlockPathTypeRaw(p_164666_, blockpos$mutableblockpos.set(p_164667_, p_164668_, p_164669_));
         if (blockpathtypes == BlockPathTypes.WATER) {
