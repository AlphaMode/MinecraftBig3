--- a/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -31,7 +_,7 @@
 public class WalkNodeEvaluator extends NodeEvaluator {
     public static final double SPACE_BETWEEN_WALL_POSTS = 0.5;
     private static final double DEFAULT_MOB_JUMP_HEIGHT = 1.125;
-    private final Long2ObjectMap<PathType> pathTypesByPosCacheByMob = new Long2ObjectOpenHashMap<>();
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectMap<BlockPos, PathType> pathTypesByPosCacheByMob = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
     private final Object2BooleanMap<AABB> collisionCache = new Object2BooleanOpenHashMap<>();
     private final Node[] reusableNeighbors = new Node[Direction.Plane.HORIZONTAL.length()];
 
@@ -87,7 +_,7 @@
         }
 
         BlockPos blockpos = this.mob.blockPosition();
-        if (!this.canStartAt(blockpos$mutableblockpos.set(blockpos.getX(), i, blockpos.getZ()))) {
+        if (!this.canStartAt(blockpos$mutableblockpos.set(blockpos.getBigX(), i, blockpos.getBigZ()))) {
             AABB aabb = this.mob.getBoundingBox();
             if (this.canStartAt(blockpos$mutableblockpos.set(aabb.minX, (double)i, aabb.minZ))
                 || this.canStartAt(blockpos$mutableblockpos.set(aabb.minX, (double)i, aabb.maxZ))
@@ -97,7 +_,7 @@
             }
         }
 
-        return this.getStartNode(new BlockPos(blockpos.getX(), i, blockpos.getZ()));
+        return this.getStartNode(new BlockPos(blockpos.getBigX(), i, blockpos.getBigZ()));
     }
 
     protected Node getStartNode(BlockPos p_230632_) {
@@ -108,7 +_,7 @@
     }
 
     protected boolean canStartAt(BlockPos p_262596_) {
-        PathType pathtype = this.getCachedPathType(p_262596_.getX(), p_262596_.getY(), p_262596_.getZ());
+        PathType pathtype = this.getCachedPathType(p_262596_.getBigX(), p_262596_.getBigY(), p_262596_.getBigZ());
         return pathtype != PathType.OPEN && this.mob.getPathfindingMalus(pathtype) >= 0.0F;
     }
 
@@ -121,7 +_,7 @@
     public int getNeighbors(Node[] p_77640_, Node p_77641_) {
         int i = 0;
         int j = 0;
-        PathType pathtype = this.getCachedPathType(p_77641_.x, p_77641_.y + 1, p_77641_.z);
+        PathType pathtype = this.getCachedPathType(p_77641_.x, p_77641_.y.add(), p_77641_.z);
         PathType pathtype1 = this.getCachedPathType(p_77641_.x, p_77641_.y, p_77641_.z);
         if (this.mob.getPathfindingMalus(pathtype) >= 0.0F && pathtype1 != PathType.STICKY_HONEY) {
             j = Mth.floor(Math.max(1.0F, this.mob.maxUpStep()));
@@ -130,7 +_,7 @@
         double d0 = this.getFloorLevel(new BlockPos(p_77641_.x, p_77641_.y, p_77641_.z));
 
         for(Direction direction : Direction.Plane.HORIZONTAL) {
-            Node node = this.findAcceptedNode(p_77641_.x + direction.getStepX(), p_77641_.y, p_77641_.z + direction.getStepZ(), j, d0, direction, pathtype1);
+            Node node = this.findAcceptedNode(p_77641_.x.add(direction.getStepX()), p_77641_.y, p_77641_.z.add(direction.getStepZ()), j, d0, direction, pathtype1);
             this.reusableNeighbors[direction.get2DDataValue()] = node;
             if (this.isNeighborValid(node, p_77641_)) {
                 p_77640_[i++] = node;
@@ -141,9 +_,9 @@
             Direction direction2 = direction1.getClockWise();
             if (this.isDiagonalValid(p_77641_, this.reusableNeighbors[direction1.get2DDataValue()], this.reusableNeighbors[direction2.get2DDataValue()])) {
                 Node node1 = this.findAcceptedNode(
-                    p_77641_.x + direction1.getStepX() + direction2.getStepX(),
+                    p_77641_.x.add(direction1.getStepX() + direction2.getStepX()),
                     p_77641_.y,
-                    p_77641_.z + direction1.getStepZ() + direction2.getStepZ(),
+                    p_77641_.z.add(direction1.getStepZ() + direction2.getStepZ()),
                     j,
                     d0,
                     direction1,
@@ -163,11 +_,11 @@
     }
 
     protected boolean isDiagonalValid(Node p_326907_, @Nullable Node p_326803_, @Nullable Node p_326821_) {
-        if (p_326821_ == null || p_326803_ == null || p_326821_.y > p_326907_.y || p_326803_.y > p_326907_.y) {
+        if (p_326821_ == null || p_326803_ == null || p_326821_.y.compareTo(p_326907_.y) > 0 || p_326803_.y.compareTo(p_326907_.y) > 0) {
             return false;
         } else if (p_326803_.type != PathType.WALKABLE_DOOR && p_326821_.type != PathType.WALKABLE_DOOR) {
             boolean flag = p_326821_.type == PathType.FENCE && p_326803_.type == PathType.FENCE && (double)this.mob.getBbWidth() < 0.5;
-            return (p_326821_.y < p_326907_.y || p_326821_.costMalus >= 0.0F || flag) && (p_326803_.y < p_326907_.y || p_326803_.costMalus >= 0.0F || flag);
+            return (p_326821_.y.compareTo(p_326907_.y) < 0 || p_326821_.costMalus >= 0.0F || flag) && (p_326803_.y.compareTo(p_326907_.y) < 0 || p_326803_.costMalus >= 0.0F || flag);
         } else {
             return false;
         }
@@ -190,9 +_,9 @@
     private boolean canReachWithoutCollision(Node p_77625_) {
         AABB aabb = this.mob.getBoundingBox();
         Vec3 vec3 = new Vec3(
-            (double)p_77625_.x - this.mob.getX() + aabb.getXsize() / 2.0,
-            (double)p_77625_.y - this.mob.getY() + aabb.getYsize() / 2.0,
-            (double)p_77625_.z - this.mob.getZ() + aabb.getZsize() / 2.0
+            (double)p_77625_.x.doubleValue() - this.mob.getX() + aabb.getXsize() / 2.0,
+            (double)p_77625_.y.doubleValue() - this.mob.getY() + aabb.getYsize() / 2.0,
+            (double)p_77625_.z.doubleValue() - this.mob.getZ() + aabb.getZsize() / 2.0
         );
         int i = Mth.ceil(vec3.length() / aabb.getSize());
         vec3 = vec3.scale((double)(1.0F / (float)i));
@@ -225,7 +_,7 @@
     }
 
     @Nullable
-    protected Node findAcceptedNode(int p_164726_, int p_164727_, int p_164728_, int p_164729_, double p_164730_, Direction p_164731_, PathType p_326873_) {
+    protected Node findAcceptedNode(me.alphamode.mcbig.math.BigInteger p_164726_, me.alphamode.mcbig.math.BigInteger p_164727_, me.alphamode.mcbig.math.BigInteger p_164728_, int p_164729_, double p_164730_, Direction p_164731_, PathType p_326873_) {
         Node node = null;
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
         double d0 = this.getFloorLevel(blockpos$mutableblockpos.set(p_164726_, p_164727_, p_164728_));
@@ -269,21 +_,21 @@
         return Math.max(1.125, (double)this.mob.maxUpStep());
     }
 
-    private Node getNodeAndUpdateCostToMax(int p_230620_, int p_230621_, int p_230622_, PathType p_326789_, float p_230624_) {
+    private Node getNodeAndUpdateCostToMax(me.alphamode.mcbig.math.BigInteger p_230620_, me.alphamode.mcbig.math.BigInteger p_230621_, me.alphamode.mcbig.math.BigInteger p_230622_, PathType p_326789_, float p_230624_) {
         Node node = this.getNode(p_230620_, p_230621_, p_230622_);
         node.type = p_326789_;
         node.costMalus = Math.max(node.costMalus, p_230624_);
         return node;
     }
 
-    private Node getBlockedNode(int p_230628_, int p_230629_, int p_230630_) {
+    private Node getBlockedNode(me.alphamode.mcbig.math.BigInteger p_230628_, me.alphamode.mcbig.math.BigInteger p_230629_, me.alphamode.mcbig.math.BigInteger p_230630_) {
         Node node = this.getNode(p_230628_, p_230629_, p_230630_);
         node.type = PathType.BLOCKED;
         node.costMalus = -1.0F;
         return node;
     }
 
-    private Node getClosedNode(int p_326935_, int p_326904_, int p_326845_, PathType p_326820_) {
+    private Node getClosedNode(me.alphamode.mcbig.math.BigInteger p_326935_, me.alphamode.mcbig.math.BigInteger p_326904_, me.alphamode.mcbig.math.BigInteger p_326845_, PathType p_326820_) {
         Node node = this.getNode(p_326935_, p_326904_, p_326845_);
         node.closed = true;
         node.type = p_326820_;
@@ -293,16 +_,16 @@
 
     @Nullable
     private Node tryJumpOn(
-        int p_326914_,
-        int p_326900_,
-        int p_326886_,
+        me.alphamode.mcbig.math.BigInteger p_326914_,
+        me.alphamode.mcbig.math.BigInteger p_326900_,
+        me.alphamode.mcbig.math.BigInteger p_326886_,
         int p_326902_,
         double p_326800_,
         Direction p_326868_,
         PathType p_326831_,
         BlockPos.MutableBlockPos p_326839_
     ) {
-        Node node = this.findAcceptedNode(p_326914_, p_326900_ + 1, p_326886_, p_326902_ - 1, p_326800_, p_326868_, p_326831_);
+        Node node = this.findAcceptedNode(p_326914_, p_326900_.add(), p_326886_, p_326902_ - 1, p_326800_, p_326868_, p_326831_);
         if (node == null) {
             return null;
         } else if (this.mob.getBbWidth() >= 1.0F) {
@@ -310,15 +_,15 @@
         } else if (node.type != PathType.OPEN && node.type != PathType.WALKABLE) {
             return node;
         } else {
-            double d0 = (double)(p_326914_ - p_326868_.getStepX()) + 0.5;
-            double d1 = (double)(p_326886_ - p_326868_.getStepZ()) + 0.5;
+            double d0 = (double)(p_326914_.subtract(p_326868_.getStepX())).doubleValue() + 0.5;
+            double d1 = (double)(p_326886_.subtract(p_326868_.getStepZ())).doubleValue() + 0.5;
             double d2 = (double)this.mob.getBbWidth() / 2.0;
             AABB aabb = new AABB(
                 d0 - d2,
-                this.getFloorLevel(p_326839_.set(d0, (double)(p_326900_ + 1), d1)) + 0.001,
+                this.getFloorLevel(p_326839_.set(d0, (double)(p_326900_.add()).doubleValue(), d1)) + 0.001,
                 d1 - d2,
                 d0 + d2,
-                (double)this.mob.getBbHeight() + this.getFloorLevel(p_326839_.set((double)node.x, (double)node.y, (double)node.z)) - 0.002,
+                (double)this.mob.getBbHeight() + this.getFloorLevel(p_326839_.set((double)node.x.doubleValue(), (double)node.y.doubleValue(), (double)node.z.doubleValue())) - 0.002,
                 d1 + d2
             );
             return this.hasCollisions(aabb) ? null : node;
@@ -326,25 +_,25 @@
     }
 
     @Nullable
-    private Node tryFindFirstNonWaterBelow(int p_326959_, int p_326927_, int p_326932_, @Nullable Node p_326880_) {
-        --p_326927_;
+    private Node tryFindFirstNonWaterBelow(me.alphamode.mcbig.math.BigInteger p_326959_, me.alphamode.mcbig.math.BigInteger p_326927_, me.alphamode.mcbig.math.BigInteger p_326932_, @Nullable Node p_326880_) {
+        p_326927_ = p_326927_.subtract();
 
-        while(p_326927_ > this.mob.level().getMinBuildHeight()) {
+        while(p_326927_.compareTo(this.mob.level().getMinBuildHeight()) > 0) {
             PathType pathtype = this.getCachedPathType(p_326959_, p_326927_, p_326932_);
             if (pathtype != PathType.WATER) {
                 return p_326880_;
             }
 
             p_326880_ = this.getNodeAndUpdateCostToMax(p_326959_, p_326927_, p_326932_, pathtype, this.mob.getPathfindingMalus(pathtype));
-            --p_326927_;
+            p_326927_ = p_326927_.subtract();
         }
 
         return p_326880_;
     }
 
-    private Node tryFindFirstGroundNodeBelow(int p_326892_, int p_326901_, int p_326809_) {
-        for(int i = p_326901_ - 1; i >= this.mob.level().getMinBuildHeight(); --i) {
-            if (p_326901_ - i > this.mob.getMaxFallDistance()) {
+    private Node tryFindFirstGroundNodeBelow(me.alphamode.mcbig.math.BigInteger p_326892_, me.alphamode.mcbig.math.BigInteger p_326901_, me.alphamode.mcbig.math.BigInteger p_326809_) {
+        for(me.alphamode.mcbig.math.BigInteger i = p_326901_.subtract(); i.compareTo(this.mob.level().getMinBuildHeight()) >= 0; i = i.subtract()) {
+            if (p_326901_.subtract(i).compareTo(this.mob.getMaxFallDistance()) > 0) {
                 return this.getBlockedNode(p_326892_, i, p_326809_);
             }
 
@@ -366,16 +_,16 @@
         return this.collisionCache.computeIfAbsent(p_77635_, p_330163_ -> !this.currentContext.level().noCollision(this.mob, p_77635_));
     }
 
-    protected PathType getCachedPathType(int p_326926_, int p_326795_, int p_326824_) {
+    protected PathType getCachedPathType(me.alphamode.mcbig.math.BigInteger p_326926_, me.alphamode.mcbig.math.BigInteger p_326795_, me.alphamode.mcbig.math.BigInteger p_326824_) {
         return this.pathTypesByPosCacheByMob
             .computeIfAbsent(
-                BlockPos.asLong(p_326926_, p_326795_, p_326824_),
+                new BlockPos(p_326926_, p_326795_, p_326824_),
                 p_330161_ -> this.getPathTypeOfMob(this.currentContext, p_326926_, p_326795_, p_326824_, this.mob)
             );
     }
 
     @Override
-    public PathType getPathTypeOfMob(PathfindingContext p_330551_, int p_326939_, int p_326943_, int p_326876_, Mob p_326786_) {
+    public PathType getPathTypeOfMob(PathfindingContext p_330551_, me.alphamode.mcbig.math.BigInteger p_326939_, me.alphamode.mcbig.math.BigInteger p_326943_, me.alphamode.mcbig.math.BigInteger p_326876_, Mob p_326786_) {
         Set<PathType> set = this.getPathTypeWithinMobBB(p_330551_, p_326939_, p_326943_, p_326876_);
         if (set.contains(PathType.FENCE)) {
             return PathType.FENCE;
@@ -403,15 +_,15 @@
         }
     }
 
-    public Set<PathType> getPathTypeWithinMobBB(PathfindingContext p_331617_, int p_326916_, int p_326906_, int p_326848_) {
+    public Set<PathType> getPathTypeWithinMobBB(PathfindingContext p_331617_, me.alphamode.mcbig.math.BigInteger p_326916_, me.alphamode.mcbig.math.BigInteger p_326906_, me.alphamode.mcbig.math.BigInteger p_326848_) {
         EnumSet<PathType> enumset = EnumSet.noneOf(PathType.class);
 
         for(int i = 0; i < this.entityWidth; ++i) {
             for(int j = 0; j < this.entityHeight; ++j) {
                 for(int k = 0; k < this.entityDepth; ++k) {
-                    int l = i + p_326916_;
-                    int i1 = j + p_326906_;
-                    int j1 = k + p_326848_;
+                    me.alphamode.mcbig.math.BigInteger l = p_326916_.add(i);
+                    me.alphamode.mcbig.math.BigInteger i1 = p_326906_.add(j);
+                    me.alphamode.mcbig.math.BigInteger j1 = p_326848_.add(k);
                     PathType pathtype = this.getPathType(p_331617_, l, i1, j1);
                     BlockPos blockpos = this.mob.blockPosition();
                     boolean flag = this.canPassDoors();
@@ -424,8 +_,8 @@
                     }
 
                     if (pathtype == PathType.RAIL
-                        && this.getPathType(p_331617_, blockpos.getX(), blockpos.getY(), blockpos.getZ()) != PathType.RAIL
-                        && this.getPathType(p_331617_, blockpos.getX(), blockpos.getY() - 1, blockpos.getZ()) != PathType.RAIL) {
+                        && this.getPathType(p_331617_, blockpos.getBigX(), blockpos.getBigY(), blockpos.getBigZ()) != PathType.RAIL
+                        && this.getPathType(p_331617_, blockpos.getBigX(), blockpos.getBigY().subtract(), blockpos.getBigZ()) != PathType.RAIL) {
                         pathtype = PathType.UNPASSABLE_RAIL;
                     }
 
@@ -438,7 +_,7 @@
     }
 
     @Override
-    public PathType getPathType(PathfindingContext p_330217_, int p_326856_, int p_326857_, int p_326859_) {
+    public PathType getPathType(PathfindingContext p_330217_, me.alphamode.mcbig.math.BigInteger p_326856_, me.alphamode.mcbig.math.BigInteger p_326857_, me.alphamode.mcbig.math.BigInteger p_326859_) {
         return getPathTypeStatic(p_330217_, new BlockPos.MutableBlockPos(p_326856_, p_326857_, p_326859_));
     }
 
@@ -447,12 +_,12 @@
     }
 
     public static PathType getPathTypeStatic(PathfindingContext p_330755_, BlockPos.MutableBlockPos p_331020_) {
-        int i = p_331020_.getX();
-        int j = p_331020_.getY();
-        int k = p_331020_.getZ();
+        me.alphamode.mcbig.math.BigInteger i = p_331020_.getBigX();
+        me.alphamode.mcbig.math.BigInteger j = p_331020_.getBigY();
+        me.alphamode.mcbig.math.BigInteger k = p_331020_.getBigZ();
         PathType pathtype = p_330755_.getPathTypeFromState(i, j, k);
-        if (pathtype == PathType.OPEN && j >= p_330755_.level().getMinBuildHeight() + 1) {
-            return switch(p_330755_.getPathTypeFromState(i, j - 1, k)) {
+        if (pathtype == PathType.OPEN && j.compareTo(p_330755_.level().getMinBuildHeight() + 1) >= 0) {
+            return switch(p_330755_.getPathTypeFromState(i, j.subtract(), k)) {
                 case OPEN, WATER, LAVA, WALKABLE -> PathType.OPEN;
                 case DAMAGE_FIRE -> PathType.DAMAGE_FIRE;
                 case DAMAGE_OTHER -> PathType.DAMAGE_OTHER;
@@ -467,12 +_,12 @@
         }
     }
 
-    public static PathType checkNeighbourBlocks(PathfindingContext p_331893_, int p_332169_, int p_330433_, int p_331506_, PathType p_326944_) {
+    public static PathType checkNeighbourBlocks(PathfindingContext p_331893_, me.alphamode.mcbig.math.BigInteger p_332169_, me.alphamode.mcbig.math.BigInteger p_330433_, me.alphamode.mcbig.math.BigInteger p_331506_, PathType p_326944_) {
         for(int i = -1; i <= 1; ++i) {
             for(int j = -1; j <= 1; ++j) {
                 for(int k = -1; k <= 1; ++k) {
                     if (i != 0 || k != 0) {
-                        PathType pathtype = p_331893_.getPathTypeFromState(p_332169_ + i, p_330433_ + j, p_331506_ + k);
+                        PathType pathtype = p_331893_.getPathTypeFromState(p_332169_.add(i), p_330433_.add(j), p_331506_.add(k));
                         if (pathtype == PathType.DAMAGE_OTHER) {
                             return PathType.DANGER_OTHER;
                         }
