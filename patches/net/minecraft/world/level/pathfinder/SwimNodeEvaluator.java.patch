--- a/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java
@@ -16,7 +_,7 @@
 
 public class SwimNodeEvaluator extends NodeEvaluator {
     private final boolean allowBreaching;
-    private final Long2ObjectMap<PathType> pathTypesByPosCache = new Long2ObjectOpenHashMap<>();
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectMap<BlockPos, PathType> pathTypesByPosCache = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
 
     public SwimNodeEvaluator(boolean p_77457_) {
         this.allowBreaching = p_77457_;
@@ -37,7 +_,7 @@
     @Override
     public Node getStart() {
         return this.getNode(
-            Mth.floor(this.mob.getBoundingBox().minX), Mth.floor(this.mob.getBoundingBox().minY + 0.5), Mth.floor(this.mob.getBoundingBox().minZ)
+            Mth.bigFloor(this.mob.getBoundingBox().minX), Mth.bigFloor(this.mob.getBoundingBox().minY + 0.5), Mth.bigFloor(this.mob.getBoundingBox().minZ)
         );
     }
 
@@ -52,7 +_,7 @@
         Map<Direction, Node> map = Maps.newEnumMap(Direction.class);
 
         for(Direction direction : Direction.values()) {
-            Node node = this.findAcceptedNode(p_77484_.x + direction.getStepX(), p_77484_.y + direction.getStepY(), p_77484_.z + direction.getStepZ());
+            Node node = this.findAcceptedNode(p_77484_.x.add(direction.getStepX()), p_77484_.y.add(direction.getStepY()), p_77484_.z.add(direction.getStepZ()));
             map.put(direction, node);
             if (this.isNodeValid(node)) {
                 p_77483_[i++] = node;
@@ -63,7 +_,7 @@
             Direction direction2 = direction1.getClockWise();
             if (hasMalus(map.get(direction1)) && hasMalus(map.get(direction2))) {
                 Node node1 = this.findAcceptedNode(
-                    p_77484_.x + direction1.getStepX() + direction2.getStepX(), p_77484_.y, p_77484_.z + direction1.getStepZ() + direction2.getStepZ()
+                    p_77484_.x.add(direction1.getStepX() + direction2.getStepX()), p_77484_.y, p_77484_.z.add(direction1.getStepZ() + direction2.getStepZ())
                 );
                 if (this.isNodeValid(node1)) {
                     p_77483_[i++] = node1;
@@ -83,7 +_,7 @@
     }
 
     @Nullable
-    protected Node findAcceptedNode(int p_263032_, int p_263066_, int p_263105_) {
+    protected Node findAcceptedNode(me.alphamode.mcbig.math.BigInteger p_263032_, me.alphamode.mcbig.math.BigInteger p_263066_, me.alphamode.mcbig.math.BigInteger p_263105_) {
         Node node = null;
         PathType pathtype = this.getCachedBlockType(p_263032_, p_263066_, p_263105_);
         if (this.allowBreaching && pathtype == PathType.BREACH || pathtype == PathType.WATER) {
@@ -101,25 +_,25 @@
         return node;
     }
 
-    protected PathType getCachedBlockType(int p_192968_, int p_192969_, int p_192970_) {
+    protected PathType getCachedBlockType(me.alphamode.mcbig.math.BigInteger p_192968_, me.alphamode.mcbig.math.BigInteger p_192969_, me.alphamode.mcbig.math.BigInteger p_192970_) {
         return this.pathTypesByPosCache
             .computeIfAbsent(
-                BlockPos.asLong(p_192968_, p_192969_, p_192970_), p_330157_ -> this.getPathType(this.currentContext, p_192968_, p_192969_, p_192970_)
+                new BlockPos(p_192968_, p_192969_, p_192970_), p_330157_ -> this.getPathType(this.currentContext, p_192968_, p_192969_, p_192970_)
             );
     }
 
     @Override
-    public PathType getPathType(PathfindingContext p_330490_, int p_326812_, int p_326835_, int p_326945_) {
+    public PathType getPathType(PathfindingContext p_330490_, me.alphamode.mcbig.math.BigInteger p_326812_, me.alphamode.mcbig.math.BigInteger p_326835_, me.alphamode.mcbig.math.BigInteger p_326945_) {
         return this.getPathTypeOfMob(p_330490_, p_326812_, p_326835_, p_326945_, this.mob);
     }
 
     @Override
-    public PathType getPathTypeOfMob(PathfindingContext p_330584_, int p_77473_, int p_77474_, int p_77475_, Mob p_77476_) {
+    public PathType getPathTypeOfMob(PathfindingContext p_330584_, me.alphamode.mcbig.math.BigInteger p_77473_, me.alphamode.mcbig.math.BigInteger p_77474_, me.alphamode.mcbig.math.BigInteger p_77475_, Mob p_77476_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-        for(int i = p_77473_; i < p_77473_ + this.entityWidth; ++i) {
-            for(int j = p_77474_; j < p_77474_ + this.entityHeight; ++j) {
-                for(int k = p_77475_; k < p_77475_ + this.entityDepth; ++k) {
+        for(me.alphamode.mcbig.math.BigInteger i = p_77473_; i.compareTo(p_77473_.add(this.entityWidth)) < 0; i = i.add()) {
+            for(me.alphamode.mcbig.math.BigInteger j = p_77474_; j.compareTo(p_77474_.add(this.entityHeight)) < 0; j = j.add()) {
+                for(me.alphamode.mcbig.math.BigInteger k = p_77475_; k.compareTo(p_77475_.add(this.entityDepth)) < 0; k = k.add()) {
                     BlockState blockstate = p_330584_.getBlockState(blockpos$mutableblockpos.set(i, j, k));
                     FluidState fluidstate = blockstate.getFluidState();
                     if (fluidstate.isEmpty() && blockstate.isPathfindable(PathComputationType.WATER) && blockstate.isAir()) {
