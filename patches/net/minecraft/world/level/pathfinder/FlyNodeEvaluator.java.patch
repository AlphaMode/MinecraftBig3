--- a/net/minecraft/world/level/pathfinder/FlyNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/FlyNodeEvaluator.java
@@ -15,7 +_,7 @@
 import net.minecraft.world.phys.AABB;
 
 public class FlyNodeEvaluator extends WalkNodeEvaluator {
-    private final Long2ObjectMap<BlockPathTypes> pathTypeByPosCache = new Long2ObjectOpenHashMap<>();
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectMap<BlockPos, BlockPathTypes> pathTypeByPosCache = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
     private static final float SMALL_MOB_INFLATED_START_NODE_BOUNDING_BOX = 1.5F;
     private static final int MAX_START_NODE_CANDIDATES = 10;
 
@@ -70,103 +_,103 @@
 
     @Override
     public Target getGoal(double p_77229_, double p_77230_, double p_77231_) {
-        return this.getTargetFromNode(this.getNode(Mth.floor(p_77229_), Mth.floor(p_77230_), Mth.floor(p_77231_)));
+        return this.getTargetFromNode(this.getNode(Mth.bigFloor(p_77229_), Mth.bigFloor(p_77230_), Mth.bigFloor(p_77231_)));
     }
 
     @Override
     public int getNeighbors(Node[] p_77266_, Node p_77267_) {
         int i = 0;
-        Node node = this.findAcceptedNode(p_77267_.x, p_77267_.y, p_77267_.z + 1);
+        Node node = this.findAcceptedNode(p_77267_.x, p_77267_.y, p_77267_.z.add());
         if (this.isOpen(node)) {
             p_77266_[i++] = node;
         }
 
-        Node node1 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y, p_77267_.z);
+        Node node1 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y, p_77267_.z);
         if (this.isOpen(node1)) {
             p_77266_[i++] = node1;
         }
 
-        Node node2 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y, p_77267_.z);
+        Node node2 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y, p_77267_.z);
         if (this.isOpen(node2)) {
             p_77266_[i++] = node2;
         }
 
-        Node node3 = this.findAcceptedNode(p_77267_.x, p_77267_.y, p_77267_.z - 1);
+        Node node3 = this.findAcceptedNode(p_77267_.x, p_77267_.y, p_77267_.z.subtract());
         if (this.isOpen(node3)) {
             p_77266_[i++] = node3;
         }
 
-        Node node4 = this.findAcceptedNode(p_77267_.x, p_77267_.y + 1, p_77267_.z);
+        Node node4 = this.findAcceptedNode(p_77267_.x, p_77267_.y.add(), p_77267_.z);
         if (this.isOpen(node4)) {
             p_77266_[i++] = node4;
         }
 
-        Node node5 = this.findAcceptedNode(p_77267_.x, p_77267_.y - 1, p_77267_.z);
+        Node node5 = this.findAcceptedNode(p_77267_.x, p_77267_.y.subtract(), p_77267_.z);
         if (this.isOpen(node5)) {
             p_77266_[i++] = node5;
         }
 
-        Node node6 = this.findAcceptedNode(p_77267_.x, p_77267_.y + 1, p_77267_.z + 1);
+        Node node6 = this.findAcceptedNode(p_77267_.x, p_77267_.y.add(), p_77267_.z.add());
         if (this.isOpen(node6) && this.hasMalus(node) && this.hasMalus(node4)) {
             p_77266_[i++] = node6;
         }
 
-        Node node7 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y + 1, p_77267_.z);
+        Node node7 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.add(), p_77267_.z);
         if (this.isOpen(node7) && this.hasMalus(node1) && this.hasMalus(node4)) {
             p_77266_[i++] = node7;
         }
 
-        Node node8 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y + 1, p_77267_.z);
+        Node node8 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.add(), p_77267_.z);
         if (this.isOpen(node8) && this.hasMalus(node2) && this.hasMalus(node4)) {
             p_77266_[i++] = node8;
         }
 
-        Node node9 = this.findAcceptedNode(p_77267_.x, p_77267_.y + 1, p_77267_.z - 1);
+        Node node9 = this.findAcceptedNode(p_77267_.x, p_77267_.y.add(), p_77267_.z.subtract());
         if (this.isOpen(node9) && this.hasMalus(node3) && this.hasMalus(node4)) {
             p_77266_[i++] = node9;
         }
 
-        Node node10 = this.findAcceptedNode(p_77267_.x, p_77267_.y - 1, p_77267_.z + 1);
+        Node node10 = this.findAcceptedNode(p_77267_.x, p_77267_.y.subtract(), p_77267_.z.add());
         if (this.isOpen(node10) && this.hasMalus(node) && this.hasMalus(node5)) {
             p_77266_[i++] = node10;
         }
 
-        Node node11 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y - 1, p_77267_.z);
+        Node node11 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.subtract(), p_77267_.z);
         if (this.isOpen(node11) && this.hasMalus(node1) && this.hasMalus(node5)) {
             p_77266_[i++] = node11;
         }
 
-        Node node12 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y - 1, p_77267_.z);
+        Node node12 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.subtract(), p_77267_.z);
         if (this.isOpen(node12) && this.hasMalus(node2) && this.hasMalus(node5)) {
             p_77266_[i++] = node12;
         }
 
-        Node node13 = this.findAcceptedNode(p_77267_.x, p_77267_.y - 1, p_77267_.z - 1);
+        Node node13 = this.findAcceptedNode(p_77267_.x, p_77267_.y.subtract(), p_77267_.z.subtract());
         if (this.isOpen(node13) && this.hasMalus(node3) && this.hasMalus(node5)) {
             p_77266_[i++] = node13;
         }
 
-        Node node14 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y, p_77267_.z - 1);
+        Node node14 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y, p_77267_.z.subtract());
         if (this.isOpen(node14) && this.hasMalus(node3) && this.hasMalus(node2)) {
             p_77266_[i++] = node14;
         }
 
-        Node node15 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y, p_77267_.z + 1);
+        Node node15 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y, p_77267_.z.add());
         if (this.isOpen(node15) && this.hasMalus(node) && this.hasMalus(node2)) {
             p_77266_[i++] = node15;
         }
 
-        Node node16 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y, p_77267_.z - 1);
+        Node node16 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y, p_77267_.z.subtract());
         if (this.isOpen(node16) && this.hasMalus(node3) && this.hasMalus(node1)) {
             p_77266_[i++] = node16;
         }
 
-        Node node17 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y, p_77267_.z + 1);
+        Node node17 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y, p_77267_.z.add());
         if (this.isOpen(node17) && this.hasMalus(node) && this.hasMalus(node1)) {
             p_77266_[i++] = node17;
         }
 
-        Node node18 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y + 1, p_77267_.z - 1);
+        Node node18 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.add(), p_77267_.z.subtract());
         if (this.isOpen(node18)
             && this.hasMalus(node14)
             && this.hasMalus(node3)
@@ -177,7 +_,7 @@
             p_77266_[i++] = node18;
         }
 
-        Node node19 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y + 1, p_77267_.z + 1);
+        Node node19 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.add(), p_77267_.z.add());
         if (this.isOpen(node19)
             && this.hasMalus(node15)
             && this.hasMalus(node)
@@ -188,7 +_,7 @@
             p_77266_[i++] = node19;
         }
 
-        Node node20 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y + 1, p_77267_.z - 1);
+        Node node20 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.add(), p_77267_.z.subtract());
         if (this.isOpen(node20)
             && this.hasMalus(node16)
             && this.hasMalus(node3)
@@ -199,7 +_,7 @@
             p_77266_[i++] = node20;
         }
 
-        Node node21 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y + 1, p_77267_.z + 1);
+        Node node21 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.add(), p_77267_.z.add());
         if (this.isOpen(node21)
             && this.hasMalus(node17)
             && this.hasMalus(node)
@@ -210,7 +_,7 @@
             p_77266_[i++] = node21;
         }
 
-        Node node22 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y - 1, p_77267_.z - 1);
+        Node node22 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.subtract(), p_77267_.z.subtract());
         if (this.isOpen(node22)
             && this.hasMalus(node14)
             && this.hasMalus(node3)
@@ -221,7 +_,7 @@
             p_77266_[i++] = node22;
         }
 
-        Node node23 = this.findAcceptedNode(p_77267_.x + 1, p_77267_.y - 1, p_77267_.z + 1);
+        Node node23 = this.findAcceptedNode(p_77267_.x.add(), p_77267_.y.subtract(), p_77267_.z.add());
         if (this.isOpen(node23)
             && this.hasMalus(node15)
             && this.hasMalus(node)
@@ -232,7 +_,7 @@
             p_77266_[i++] = node23;
         }
 
-        Node node24 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y - 1, p_77267_.z - 1);
+        Node node24 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.subtract(), p_77267_.z.subtract());
         if (this.isOpen(node24)
             && this.hasMalus(node16)
             && this.hasMalus(node3)
@@ -243,7 +_,7 @@
             p_77266_[i++] = node24;
         }
 
-        Node node25 = this.findAcceptedNode(p_77267_.x - 1, p_77267_.y - 1, p_77267_.z + 1);
+        Node node25 = this.findAcceptedNode(p_77267_.x.subtract(), p_77267_.y.subtract(), p_77267_.z.add());
         if (this.isOpen(node25)
             && this.hasMalus(node17)
             && this.hasMalus(node)
@@ -266,7 +_,7 @@
     }
 
     @Nullable
-    protected Node findAcceptedNode(int p_262970_, int p_263018_, int p_262947_) {
+    protected Node findAcceptedNode(me.alphamode.mcbig.math.BigInteger p_262970_, me.alphamode.mcbig.math.BigInteger p_263018_, me.alphamode.mcbig.math.BigInteger p_262947_) {
         Node node = null;
         BlockPathTypes blockpathtypes = this.getCachedBlockPathType(p_262970_, p_263018_, p_262947_);
         float f = this.mob.getPathfindingMalus(blockpathtypes);
@@ -282,15 +_,15 @@
         return node;
     }
 
-    private BlockPathTypes getCachedBlockPathType(int p_164694_, int p_164695_, int p_164696_) {
+    private BlockPathTypes getCachedBlockPathType(me.alphamode.mcbig.math.BigInteger p_164694_, me.alphamode.mcbig.math.BigInteger p_164695_, me.alphamode.mcbig.math.BigInteger p_164696_) {
         return this.pathTypeByPosCache
             .computeIfAbsent(
-                BlockPos.asLong(p_164694_, p_164695_, p_164696_), p_265010_ -> this.getBlockPathType(this.level, p_164694_, p_164695_, p_164696_, this.mob)
+                new BlockPos(p_164694_, p_164695_, p_164696_), p_265010_ -> this.getBlockPathType(this.level, p_164694_, p_164695_, p_164696_, this.mob)
             );
     }
 
     @Override
-    public BlockPathTypes getBlockPathType(BlockGetter p_265753_, int p_265243_, int p_265376_, int p_265253_, Mob p_265367_) {
+    public BlockPathTypes getBlockPathType(BlockGetter p_265753_, me.alphamode.mcbig.math.BigInteger p_265243_, me.alphamode.mcbig.math.BigInteger p_265376_, me.alphamode.mcbig.math.BigInteger p_265253_, Mob p_265367_) {
         EnumSet<BlockPathTypes> enumset = EnumSet.noneOf(BlockPathTypes.class);
         BlockPathTypes blockpathtypes = BlockPathTypes.BLOCKED;
         BlockPos blockpos = p_265367_.blockPosition();
@@ -315,11 +_,11 @@
     }
 
     @Override
-    public BlockPathTypes getBlockPathType(BlockGetter p_77245_, int p_77246_, int p_77247_, int p_77248_) {
+    public BlockPathTypes getBlockPathType(BlockGetter p_77245_, me.alphamode.mcbig.math.BigInteger p_77246_, me.alphamode.mcbig.math.BigInteger p_77247_, me.alphamode.mcbig.math.BigInteger p_77248_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
         BlockPathTypes blockpathtypes = getBlockPathTypeRaw(p_77245_, blockpos$mutableblockpos.set(p_77246_, p_77247_, p_77248_));
-        if (blockpathtypes == BlockPathTypes.OPEN && p_77247_ >= p_77245_.getMinBuildHeight() + 1) {
-            BlockPathTypes blockpathtypes1 = getBlockPathTypeRaw(p_77245_, blockpos$mutableblockpos.set(p_77246_, p_77247_ - 1, p_77248_));
+        if (blockpathtypes == BlockPathTypes.OPEN && p_77247_.longValue() >= p_77245_.getMinBuildHeight() + 1) {
+            BlockPathTypes blockpathtypes1 = getBlockPathTypeRaw(p_77245_, blockpos$mutableblockpos.set(p_77246_, p_77247_.subtract(), p_77248_));
             if (blockpathtypes1 == BlockPathTypes.DAMAGE_FIRE || blockpathtypes1 == BlockPathTypes.LAVA) {
                 blockpathtypes = BlockPathTypes.DAMAGE_FIRE;
             } else if (blockpathtypes1 == BlockPathTypes.DAMAGE_OTHER) {
@@ -365,12 +_,12 @@
             return BlockPos.randomBetweenClosed(
                 p_263108_.getRandom(),
                 10,
-                Mth.floor(aabb1.minX),
-                Mth.floor(aabb1.minY),
-                Mth.floor(aabb1.minZ),
-                Mth.floor(aabb1.maxX),
-                Mth.floor(aabb1.maxY),
-                Mth.floor(aabb1.maxZ)
+                Mth.bigFloor(aabb1.minX),
+                Mth.bigFloor(aabb1.minY),
+                Mth.bigFloor(aabb1.minZ),
+                Mth.bigFloor(aabb1.maxX),
+                Mth.bigFloor(aabb1.maxY),
+                Mth.bigFloor(aabb1.maxZ)
             );
         }
     }
