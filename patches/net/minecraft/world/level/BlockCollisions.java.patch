--- a/net/minecraft/world/level/BlockCollisions.java
+++ b/net/minecraft/world/level/BlockCollisions.java
@@ -26,7 +_,7 @@
     private final boolean onlySuffocatingBlocks;
     @Nullable
     private BlockGetter cachedBlockGetter;
-    private long cachedBlockGetterPos;
+    private ChunkPos cachedBlockGetterPos;
     private final BiFunction<BlockPos.MutableBlockPos, VoxelShape, T> resultProvider;
 
     public BlockCollisions(
@@ -39,21 +_,21 @@
         this.box = p_286624_;
         this.onlySuffocatingBlocks = p_286354_;
         this.resultProvider = p_286303_;
-        int i = Mth.floor(p_286624_.minX - 1.0E-7) - 1;
-        int j = Mth.floor(p_286624_.maxX + 1.0E-7) + 1;
-        int k = Mth.floor(p_286624_.minY - 1.0E-7) - 1;
-        int l = Mth.floor(p_286624_.maxY + 1.0E-7) + 1;
-        int i1 = Mth.floor(p_286624_.minZ - 1.0E-7) - 1;
-        int j1 = Mth.floor(p_286624_.maxZ + 1.0E-7) + 1;
+        me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(p_286624_.minX - 1.0E-7).subtract();
+        me.alphamode.mcbig.math.BigInteger j = Mth.bigFloor(p_286624_.maxX + 1.0E-7).add();
+        me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(p_286624_.minY - 1.0E-7).subtract();
+        me.alphamode.mcbig.math.BigInteger l = Mth.bigFloor(p_286624_.maxY + 1.0E-7).add();
+        me.alphamode.mcbig.math.BigInteger i1 = Mth.bigFloor(p_286624_.minZ - 1.0E-7).subtract();
+        me.alphamode.mcbig.math.BigInteger j1 = Mth.bigFloor(p_286624_.maxZ + 1.0E-7).add();
         this.cursor = new Cursor3D(i, k, i1, j, l, j1);
     }
 
     @Nullable
-    private BlockGetter getChunk(int p_186412_, int p_186413_) {
-        int i = SectionPos.blockToSectionCoord(p_186412_);
-        int j = SectionPos.blockToSectionCoord(p_186413_);
-        long k = ChunkPos.asLong(i, j);
-        if (this.cachedBlockGetter != null && this.cachedBlockGetterPos == k) {
+    private BlockGetter getChunk(me.alphamode.mcbig.math.BigInteger p_186412_, me.alphamode.mcbig.math.BigInteger p_186413_) {
+        me.alphamode.mcbig.math.BigInteger i = SectionPos.blockToSectionCoord(p_186412_);
+        me.alphamode.mcbig.math.BigInteger j = SectionPos.blockToSectionCoord(p_186413_);
+        ChunkPos k = new ChunkPos(i, j);
+        if (this.cachedBlockGetter != null && this.cachedBlockGetterPos.equals(k)) {
             return this.cachedBlockGetter;
         } else {
             BlockGetter blockgetter = this.collisionGetter.getChunkForCollisions(i, j);
@@ -66,9 +_,9 @@
     @Override
     protected T computeNext() {
         while(this.cursor.advance()) {
-            int i = this.cursor.nextX();
-            int j = this.cursor.nextY();
-            int k = this.cursor.nextZ();
+            me.alphamode.mcbig.math.BigInteger i = this.cursor.nextX();
+            me.alphamode.mcbig.math.BigInteger j = this.cursor.nextY();
+            me.alphamode.mcbig.math.BigInteger k = this.cursor.nextZ();
             int l = this.cursor.getNextType();
             if (l != 3) {
                 BlockGetter blockgetter = this.getChunk(i, k);
@@ -80,11 +_,11 @@
                         && (l != 2 || blockstate.is(Blocks.MOVING_PISTON))) {
                         VoxelShape voxelshape = blockstate.getCollisionShape(this.collisionGetter, this.pos, this.context);
                         if (voxelshape == Shapes.block()) {
-                            if (this.box.intersects((double)i, (double)j, (double)k, (double)i + 1.0, (double)j + 1.0, (double)k + 1.0)) {
-                                return this.resultProvider.apply(this.pos, voxelshape.move((double)i, (double)j, (double)k));
+                            if (this.box.intersects((double)i.doubleValue(), (double)j.doubleValue(), (double)k.doubleValue(), (double)i.doubleValue() + 1.0, (double)j.doubleValue() + 1.0, (double)k.doubleValue() + 1.0)) {
+                                return this.resultProvider.apply(this.pos, voxelshape.move((double)i.doubleValue(), (double)j.doubleValue(), (double)k.doubleValue()));
                             }
                         } else {
-                            VoxelShape voxelshape1 = voxelshape.move((double)i, (double)j, (double)k);
+                            VoxelShape voxelshape1 = voxelshape.move((double)i.doubleValue(), (double)j.doubleValue(), (double)k.doubleValue());
                             if (!voxelshape1.isEmpty() && Shapes.joinIsNotEmpty(voxelshape1, this.entityShape, BooleanOp.AND)) {
                                 return this.resultProvider.apply(this.pos, voxelshape1);
                             }
