--- a/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -38,7 +_,7 @@
     protected int tick;
     protected int lastStuckCheck;
     protected Vec3 lastStuckCheckPos = Vec3.ZERO;
-    protected Vec3i timeoutCachedNode = Vec3i.ZERO;
+    protected me.alphamode.mcbig.core.Vec3l timeoutCachedNode = me.alphamode.mcbig.core.Vec3l.ZERO;
     protected long timeoutTimer;
     protected long lastTimeoutCheck;
     protected double timeoutLimit;
@@ -227,7 +_,7 @@
     protected void followThePath() {
         Vec3 vec3 = this.getTempMobPos();
         this.maxDistanceToWaypoint = this.mob.getBbWidth() > 0.75F ? this.mob.getBbWidth() / 2.0F : 0.75F - this.mob.getBbWidth() / 2.0F;
-        Vec3i vec3i = this.path.getNextNodePos();
+        me.alphamode.mcbig.core.Vec3l vec3i = this.path.getNextNodePos();
         double d0 = Math.abs(this.mob.getX() - ((double)vec3i.getX() + 0.5));
         double d1 = Math.abs(this.mob.getY() - (double)vec3i.getY());
         double d2 = Math.abs(this.mob.getZ() - ((double)vec3i.getZ() + 0.5));
@@ -283,7 +_,7 @@
         }
 
         if (this.path != null && !this.path.isDone()) {
-            Vec3i vec3i = this.path.getNextNodePos();
+            me.alphamode.mcbig.core.Vec3l vec3i = this.path.getNextNodePos();
             long i = this.level.getGameTime();
             if (vec3i.equals(this.timeoutCachedNode)) {
                 this.timeoutTimer += i - this.lastTimeoutCheck;
@@ -307,7 +_,7 @@
     }
 
     private void resetStuckTimeout() {
-        this.timeoutCachedNode = Vec3i.ZERO;
+        this.timeoutCachedNode = me.alphamode.mcbig.core.Vec3l.ZERO;
         this.timeoutTimer = 0L;
         this.timeoutLimit = 0.0;
         this.isStuck = false;
@@ -336,9 +_,9 @@
                 Node node1 = i + 1 < this.path.getNodeCount() ? this.path.getNode(i + 1) : null;
                 BlockState blockstate = this.level.getBlockState(new BlockPos(node.x, node.y, node.z));
                 if (blockstate.is(BlockTags.CAULDRONS)) {
-                    this.path.replaceNode(i, node.cloneAndMove(node.x, node.y + 1, node.z));
-                    if (node1 != null && node.y >= node1.y) {
-                        this.path.replaceNode(i + 1, node.cloneAndMove(node1.x, node.y + 1, node1.z));
+                    this.path.replaceNode(i, node.cloneAndMove(node.x, node.y.add(), node.z));
+                    if (node1 != null && node.y.compareTo(node1.y) >= 0) {
+                        this.path.replaceNode(i + 1, node.cloneAndMove(node1.x, node.y.add(), node1.z));
                     }
                 }
             }
@@ -383,7 +_,7 @@
             return false;
         } else if (this.path != null && !this.path.isDone() && this.path.getNodeCount() != 0) {
             Node node = this.path.getEndNode();
-            Vec3 vec3 = new Vec3(((double)node.x + this.mob.getX()) / 2.0, ((double)node.y + this.mob.getY()) / 2.0, ((double)node.z + this.mob.getZ()) / 2.0);
+            Vec3 vec3 = new Vec3(((double)node.x.doubleValue() + this.mob.getX()) / 2.0, ((double)node.y.doubleValue() + this.mob.getY()) / 2.0, ((double)node.z.doubleValue() + this.mob.getZ()) / 2.0);
             return p_200904_.closerToCenterThan(vec3, (double)(this.path.getNodeCount() - this.path.getNextNodeIndex()));
         } else {
             return false;
