--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -49,7 +_,6 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
@@ -173,7 +_,10 @@
     public double xo;
     public double yo;
     public double zo;
-    private Vec3 position;
+    public me.alphamode.mcbig.math.BigDecimal bigXo = me.alphamode.mcbig.math.BigDecimal.ZERO;
+    public me.alphamode.mcbig.math.BigDecimal bigZo = me.alphamode.mcbig.math.BigDecimal.ZERO;
+    protected Vec3 position;
+    protected me.alphamode.mcbig.core.BigVec3 bigPosition;
     private BlockPos blockPosition;
     private ChunkPos chunkPosition;
     private Vec3 deltaMovement = Vec3.ZERO;
@@ -278,6 +_,7 @@
         this.level = p_19871_;
         this.dimensions = p_19870_.getDimensions();
         this.position = Vec3.ZERO;
+        this.bigPosition = me.alphamode.mcbig.core.BigVec3.ZERO;
         this.blockPosition = BlockPos.ZERO;
         this.chunkPosition = ChunkPos.ZERO;
         SynchedEntityData.Builder synchedentitydata$builder = new SynchedEntityData.Builder(this);
@@ -297,7 +_,7 @@
 
     public boolean isColliding(BlockPos p_20040_, BlockState p_20041_) {
         VoxelShape voxelshape = p_20041_.getCollisionShape(this.level(), p_20040_, CollisionContext.of(this));
-        VoxelShape voxelshape1 = voxelshape.move((double)p_20040_.getX(), (double)p_20040_.getY(), (double)p_20040_.getZ());
+        VoxelShape voxelshape1 = voxelshape.move((double)p_20040_.getBigX().doubleValue(), (double)p_20040_.getBigY().doubleValue(), (double)p_20040_.getBigZ().doubleValue());
         return Shapes.joinIsNotEmpty(voxelshape1, Shapes.create(this.getBoundingBox()), BooleanOp.AND);
     }
 
@@ -426,6 +_,11 @@
         this.setBoundingBox(this.makeBoundingBox());
     }
 
+    public void setPos(me.alphamode.mcbig.math.BigDecimal p_20210_, double p_20211_, me.alphamode.mcbig.math.BigDecimal p_20212_) {
+        this.setPosRaw(p_20210_, p_20211_, p_20212_);
+        this.setBoundingBox(this.makeBoundingBox());
+    }
+
     protected AABB makeBoundingBox() {
         return this.dimensions.makeBoundingBox(this.position);
     }
@@ -704,14 +_,14 @@
                 if (this.fallDistance != 0.0F && d0 >= 1.0) {
                     BlockHitResult blockhitresult = this.level()
                         .clip(
-                            new ClipContext(this.position(), this.position().add(vec31), ClipContext.Block.FALLDAMAGE_RESETTING, ClipContext.Fluid.WATER, this)
+                            new ClipContext(this.bigPosition(), this.bigPosition().add(vec3), ClipContext.Block.FALLDAMAGE_RESETTING, ClipContext.Fluid.WATER, this)
                         );
                     if (blockhitresult.getType() != HitResult.Type.MISS) {
                         this.resetFallDistance();
                     }
                 }
 
-                this.setPos(this.getX() + vec31.x, this.getY() + vec31.y, this.getZ() + vec31.z);
+                this.setPos(this.getBigX().add(vec31.x), this.getY() + vec31.y, this.getBigZ().add(vec31.z));
             }
 
             this.level().getProfiler().pop();
@@ -837,7 +_,7 @@
                 }
 
                 if (p_286543_) {
-                    this.level().gameEvent(GameEvent.STEP, this.position(), GameEvent.Context.of(this, p_286549_));
+                    this.level().gameEvent(GameEvent.STEP, this.bigPosition(), GameEvent.Context.of(this, p_286549_));
                 }
 
                 return true;
@@ -910,9 +_,9 @@
                     : blockpos;
             }
         } else {
-            int i = Mth.floor(this.position.x);
-            int j = Mth.floor(this.position.y - (double)p_216987_);
-            int k = Mth.floor(this.position.z);
+            me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(this.position.x);
+            me.alphamode.mcbig.math.BigInteger j = Mth.bigFloor(this.position.y - (double)p_216987_);
+            me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(this.position.z);
             return new BlockPos(i, j, k);
         }
     }
@@ -1129,9 +_,9 @@
         if (this.level().hasChunksAt(blockpos, blockpos1)) {
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for(int i = blockpos.getX(); i <= blockpos1.getX(); ++i) {
-                for(int j = blockpos.getY(); j <= blockpos1.getY(); ++j) {
-                    for(int k = blockpos.getZ(); k <= blockpos1.getZ(); ++k) {
+            for(me.alphamode.mcbig.math.BigInteger i = blockpos.getBigX(); i.compareTo(blockpos1.getBigX()) <= 0; i = i.add()) {
+                for(me.alphamode.mcbig.math.BigInteger j = blockpos.getBigY(); j.compareTo(blockpos1.getBigY()) <= 0; j = j.add()) {
+                    for(me.alphamode.mcbig.math.BigInteger k = blockpos.getBigZ(); k.compareTo(blockpos1.getBigZ()) <= 0; k = k.add()) {
                         if (!this.isAlive()) {
                             return;
                         }
@@ -1288,7 +_,7 @@
                 this.level()
                     .gameEvent(
                         GameEvent.HIT_GROUND,
-                        this.position,
+                        this.bigPosition,
                         GameEvent.Context.of(
                             this, this.mainSupportingBlockPos.<BlockState>map(p_286200_ -> this.level().getBlockState(p_286200_)).orElse(p_19913_)
                         )
@@ -1326,10 +_,12 @@
     private boolean isInRain() {
         BlockPos blockpos = this.blockPosition();
         return this.level().isRainingAt(blockpos)
-            || this.level().isRainingAt(BlockPos.containing((double)blockpos.getX(), this.getBoundingBox().maxY, (double)blockpos.getZ()));
+            || this.level().isRainingAt(BlockPos.containing((double)blockpos.getBigX().doubleValue(), this.getBoundingBox().maxY, (double)blockpos.getBigZ().doubleValue()));
     }
 
     private boolean isInBubbleColumn() {
+        if (me.alphamode.mcbig.core.BigConstants.BIG_MODE)
+            return false;
         return this.getInBlockState().is(Blocks.BUBBLE_COLUMN);
     }
 
@@ -1400,7 +_,7 @@
             return;
         }
 
-        BlockPos blockpos = BlockPos.containing(this.getX(), d0, this.getZ());
+        BlockPos blockpos = BlockPos.containing(this.getBigX(), d0, this.getBigZ());
         FluidState fluidstate = this.level().getFluidState(blockpos);
         double d1 = (double)((float)blockpos.getY() + fluidstate.getHeight(this.level(), blockpos));
         if (d1 > d0) {
@@ -1470,12 +_,12 @@
             BlockPos blockpos1 = this.blockPosition();
             double d0 = this.getX() + (this.random.nextDouble() - 0.5) * (double)this.dimensions.width();
             double d1 = this.getZ() + (this.random.nextDouble() - 0.5) * (double)this.dimensions.width();
-            if (blockpos1.getX() != blockpos.getX()) {
-                d0 = Mth.clamp(d0, (double)blockpos.getX(), (double)blockpos.getX() + 1.0);
+            if (!java.util.Objects.equals(blockpos1.getBigX(), blockpos.getBigX())) {
+                d0 = Mth.clamp(d0, (double)blockpos.getBigX().doubleValue(), (double)blockpos.getBigX().doubleValue() + 1.0);
             }
 
-            if (blockpos1.getZ() != blockpos.getZ()) {
-                d1 = Mth.clamp(d1, (double)blockpos.getZ(), (double)blockpos.getZ() + 1.0);
+            if (!java.util.Objects.equals(blockpos1.getBigZ(), blockpos.getBigZ())) {
+                d1 = Mth.clamp(d1, (double)blockpos.getBigZ().doubleValue(), (double)blockpos.getBigZ().doubleValue() + 1.0);
             }
 
             this.level().addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), d0, this.getY() + 0.1, d1, vec3.x * -4.0, 1.5, vec3.z * -4.0);
@@ -1522,15 +_,38 @@
         this.xRotO = this.getXRot();
     }
 
+    public void absMoveTo(me.alphamode.mcbig.math.BigDecimal p_19891_, double p_19892_, me.alphamode.mcbig.math.BigDecimal p_19893_, float p_19894_, float p_19895_) {
+        this.absMoveTo(p_19891_, p_19892_, p_19893_);
+        this.setYRot(p_19894_ % 360.0F);
+        this.setXRot(Mth.clamp(p_19895_, -90.0F, 90.0F) % 360.0F);
+        this.yRotO = this.getYRot();
+        this.xRotO = this.getXRot();
+    }
+
     public void absMoveTo(double p_20249_, double p_20250_, double p_20251_) {
-        double d0 = Mth.clamp(p_20249_, -3.0E7, 3.0E7);
-        double d1 = Mth.clamp(p_20251_, -3.0E7, 3.0E7);
+        double d0 = p_20249_;//Mth.clamp(p_20249_, -3.0E7, 3.0E7);
+        double d1 = p_20251_;//Mth.clamp(p_20251_, -3.0E7, 3.0E7);
         this.xo = d0;
         this.yo = p_20250_;
         this.zo = d1;
+        if (this instanceof Player) {
+            this.bigXo = me.alphamode.mcbig.math.BigDecimal.val(d0);
+            this.bigZo = me.alphamode.mcbig.math.BigDecimal.val(d1);
+        }
         this.setPos(d0, p_20250_, d1);
     }
 
+    public void absMoveTo(me.alphamode.mcbig.math.BigDecimal p_20249_, double p_20250_, me.alphamode.mcbig.math.BigDecimal p_20251_) {
+        double d0 = p_20249_.doubleValue();//Mth.clamp(p_20249_, -3.0E7, 3.0E7);
+        double d1 = p_20251_.doubleValue();//Mth.clamp(p_20251_, -3.0E7, 3.0E7);
+        this.xo = d0;
+        this.yo = p_20250_;
+        this.zo = d1;
+        this.bigXo = p_20249_;
+        this.bigZo = p_20251_;
+        this.setPos(p_20249_, p_20250_, p_20251_);
+    }
+
     public void moveTo(Vec3 p_20220_) {
         this.moveTo(p_20220_.x, p_20220_.y, p_20220_.z);
     }
@@ -1540,7 +_,7 @@
     }
 
     public void moveTo(BlockPos p_20036_, float p_20037_, float p_20038_) {
-        this.moveTo((double)p_20036_.getX() + 0.5, (double)p_20036_.getY(), (double)p_20036_.getZ() + 0.5, p_20037_, p_20038_);
+        this.moveTo((double)p_20036_.getBigX().doubleValue() + 0.5, (double)p_20036_.getBigY().doubleValue(), (double)p_20036_.getBigZ().doubleValue() + 0.5, p_20037_, p_20038_);
     }
 
     public void moveTo(double p_20108_, double p_20109_, double p_20110_, float p_20111_, float p_20112_) {
@@ -1551,13 +_,23 @@
         this.reapplyPosition();
     }
 
+    public void moveTo(me.alphamode.mcbig.math.BigDecimal p_20108_, double p_20109_, me.alphamode.mcbig.math.BigDecimal p_20110_, float p_20111_, float p_20112_) {
+        this.setPosRaw(p_20108_, p_20109_, p_20110_);
+        this.setYRot(p_20111_);
+        this.setXRot(p_20112_);
+        this.setOldPosAndRot();
+        this.reapplyPosition();
+    }
+
     public final void setOldPosAndRot() {
         double d0 = this.getX();
         double d1 = this.getY();
         double d2 = this.getZ();
         this.xo = d0;
+        this.bigXo = getBigX();
         this.yo = d1;
         this.zo = d2;
+        this.bigZo = getBigZ();
         this.xOld = d0;
         this.yOld = d1;
         this.zOld = d2;
@@ -1590,6 +_,13 @@
         return d0 * d0 + d1 * d1 + d2 * d2;
     }
 
+    public double distanceToSqr(me.alphamode.mcbig.core.BigVec3 p_20239_) {
+        double d0 = this.getBigX().subtract(p_20239_.x).doubleValue();
+        double d1 = this.getY() - p_20239_.y;
+        double d2 = this.getBigZ().subtract(p_20239_.z).doubleValue();
+        return d0 * d0 + d1 * d1 + d2 * d2;
+    }
+
     public void playerTouch(Player p_20081_) {
     }
 
@@ -1702,7 +_,7 @@
         Vec3 vec3 = this.getEyePosition(p_19909_);
         Vec3 vec31 = this.getViewVector(p_19909_);
         Vec3 vec32 = vec3.add(vec31.x * p_19908_, vec31.y * p_19908_, vec31.z * p_19908_);
-        return this.level().clip(new ClipContext(vec3, vec32, ClipContext.Block.OUTLINE, p_19910_ ? ClipContext.Fluid.ANY : ClipContext.Fluid.NONE, this));
+        return this.level().clip(new ClipContext(vec3.toBig(), vec32.toBig(), ClipContext.Block.OUTLINE, p_19910_ ? ClipContext.Fluid.ANY : ClipContext.Fluid.NONE, this));
     }
 
     public boolean canBeHitByProjectile() {
@@ -1858,9 +_,9 @@
             this.setDeltaMovement(Math.abs(d0) > 10.0 ? 0.0 : d0, Math.abs(d1) > 10.0 ? 0.0 : d1, Math.abs(d2) > 10.0 ? 0.0 : d2);
             double d3 = 3.0000512E7;
             this.setPosRaw(
-                Mth.clamp(listtag.getDouble(0), -3.0000512E7, 3.0000512E7),
-                Mth.clamp(listtag.getDouble(1), -2.0E7, 2.0E7),
-                Mth.clamp(listtag.getDouble(2), -3.0000512E7, 3.0000512E7)
+                /*Mth.clamp(*/listtag.getDouble(0),/*, -3.0000512E7, 3.0000512E7)*/
+                /*Mth.clamp(*/listtag.getDouble(1),/*, -2.0E7, 2.0E7),*/
+                /*Mth.clamp(*/listtag.getDouble(2)/*, -3.0000512E7, 3.0000512E7)*/
             );
             this.setYRot(listtag2.getFloat(0));
             this.setXRot(listtag2.getFloat(1));
@@ -2014,7 +_,7 @@
                             && blockstate.isSuffocating(this.level(), p_201942_)
                             && Shapes.joinIsNotEmpty(
                                 blockstate.getCollisionShape(this.level(), p_201942_)
-                                    .move((double)p_201942_.getX(), (double)p_201942_.getY(), (double)p_201942_.getZ()),
+                                    .move((double)p_201942_.getBigX().doubleValue(), (double)p_201942_.getBigY().doubleValue(), (double)p_201942_.getBigZ().doubleValue()),
                                 Shapes.create(aabb),
                                 BooleanOp.AND
                             );
@@ -2528,7 +_,7 @@
 
     protected void moveTowardsClosestSpace(double p_20315_, double p_20316_, double p_20317_) {
         BlockPos blockpos = BlockPos.containing(p_20315_, p_20316_, p_20317_);
-        Vec3 vec3 = new Vec3(p_20315_ - (double)blockpos.getX(), p_20316_ - (double)blockpos.getY(), p_20317_ - (double)blockpos.getZ());
+        Vec3 vec3 = new Vec3(p_20315_ - (double)blockpos.getBigX().doubleValue(), p_20316_ - (double)blockpos.getBigY().doubleValue(), p_20317_ - (double)blockpos.getBigZ().doubleValue());
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
         Direction direction = Direction.UP;
         double d0 = Double.MAX_VALUE;
@@ -2674,7 +_,7 @@
                 Entity entity = this.getType().create(p_20118_);
                 if (entity != null) {
                     entity.restoreFrom(this);
-                    entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.getXRot());
+                    entity.moveTo(portalinfo.pos.x.doubleValue(), portalinfo.pos.y, portalinfo.pos.z.doubleValue(), portalinfo.yRot, entity.getXRot());
                     entity.setDeltaMovement(portalinfo.speed);
                     p_20118_.addDuringTeleport(entity);
                     if (p_20118_.dimension() == Level.END) {
@@ -2770,11 +_,11 @@
                 if (flag2) {
                     i = blockpos.getY();
                 } else {
-                    i = p_19923_.getChunkAt(blockpos).getHeight(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockpos.getX(), blockpos.getZ()) + 1;
+                    i = p_19923_.getChunkAt(blockpos).getHeight(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockpos.getBigX(), blockpos.getBigZ()) + 1;
                 }
 
                 return new PortalInfo(
-                    new Vec3((double)blockpos.getX() + 0.5, (double)i, (double)blockpos.getZ() + 0.5), this.getDeltaMovement(), this.getYRot(), this.getXRot()
+                    new me.alphamode.mcbig.core.BigVec3(blockpos.getBigX().toBigDecimal().add(me.alphamode.mcbig.core.BigConstants.AABB), (double)i, blockpos.getBigZ().toBigDecimal().add(me.alphamode.mcbig.core.BigConstants.AABB)), this.getDeltaMovement(), this.getYRot(), this.getXRot()
                 );
             }
         }
@@ -2791,7 +_,7 @@
             p_341416_.setBlock(blockpos, Blocks.POTATO_PORTAL.defaultBlockState(), 3);
         }
 
-        return new PortalInfo(Vec3.atLowerCornerOf(blockpos).add(vec3), this.getDeltaMovement(), this.getYRot(), this.getXRot());
+        return new PortalInfo(me.alphamode.mcbig.core.BigVec3.atLowerCornerOf(blockpos).add(vec3), this.getDeltaMovement(), this.getYRot(), this.getXRot());
     }
 
     private static Optional<BlockPos> getClosestLandingPointBruteForce(ServerLevel p_342552_, BlockPos p_342303_) {
@@ -2844,7 +_,7 @@
                     .findNearestMapStructure(p_340656_, holderset, p_340556_, 128, false);
                 if (pair1 != null) {
                     ChunkPos chunkpos = new ChunkPos(pair1.getFirst());
-                    ChunkAccess chunkaccess = p_340656_.getChunk(chunkpos.x, chunkpos.z, ChunkStatus.FEATURES);
+                    ChunkAccess chunkaccess = p_340656_.getChunk(chunkpos.x(), chunkpos.z(), ChunkStatus.FEATURES);
                     StructureStart structurestart = p_340656_.structureManager()
                         .getStartForStructure(SectionPos.bottomOf(chunkaccess), pair1.getSecond().value(), chunkaccess);
                     if (structurestart != null && structurestart.isValid() && !structurestart.getPieces().isEmpty()) {
@@ -2875,7 +_,7 @@
                             p_340656_.setBlock(blockpos1, Blocks.POTATO_PORTAL.defaultBlockState(), 3);
                         }
 
-                        return new PortalInfo(Vec3.atLowerCornerOf(blockpos1).add(vec3), this.getDeltaMovement(), this.getYRot(), this.getXRot());
+                        return new PortalInfo(me.alphamode.mcbig.core.BigVec3.atLowerCornerOf(blockpos1).add(vec3), this.getDeltaMovement(), this.getYRot(), this.getXRot());
                     }
                 }
             }
@@ -2996,13 +_,13 @@
         if (this.level() instanceof ServerLevel) {
             ChunkPos chunkpos = new ChunkPos(BlockPos.containing(p_20325_, p_20326_, p_20327_));
             ((ServerLevel)this.level()).getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkpos, 0, this.getId());
-            this.level().getChunk(chunkpos.x, chunkpos.z);
+            this.level().getChunk(chunkpos.x(), chunkpos.z());
             this.teleportTo(p_20325_, p_20326_, p_20327_);
         }
     }
 
     public boolean teleportTo(
-        ServerLevel p_265257_, double p_265407_, double p_265727_, double p_265410_, Set<RelativeMovement> p_265083_, float p_265573_, float p_265094_
+        ServerLevel p_265257_, me.alphamode.mcbig.math.BigDecimal p_265407_, double p_265727_, me.alphamode.mcbig.math.BigDecimal p_265410_, Set<RelativeMovement> p_265083_, float p_265573_, float p_265094_
     ) {
         float f = Mth.clamp(p_265094_, -90.0F, 90.0F);
         if (p_265257_ == this.level()) {
@@ -3343,7 +_,7 @@
     public CommandSourceStack createCommandSourceStack() {
         return new CommandSourceStack(
             this,
-            this.position(),
+            this.bigPosition(),
             this.getRotationVector(),
             this.level() instanceof ServerLevel ? (ServerLevel)this.level() : null,
             this.getPermissionLevel(),
@@ -3378,7 +_,7 @@
     }
 
     public void lookAt(EntityAnchorArgument.Anchor p_20033_, Vec3 p_20034_) {
-        Vec3 vec3 = p_20033_.apply(this);
+        Vec3 vec3 = p_20033_.apply(this).toVanilla();
         double d0 = p_20034_.x - vec3.x;
         double d1 = p_20034_.y - vec3.y;
         double d2 = p_20034_.z - vec3.z;
@@ -3390,6 +_,19 @@
         this.yRotO = this.getYRot();
     }
 
+    public void lookAt(EntityAnchorArgument.Anchor p_20033_, me.alphamode.mcbig.core.BigVec3 p_20034_) {
+        me.alphamode.mcbig.core.BigVec3 vec3 = p_20033_.apply(this);
+        double d0 = p_20034_.x.subtract(vec3.x).doubleValue();
+        double d1 = p_20034_.y - vec3.y;
+        double d2 = p_20034_.z.subtract(vec3.z).doubleValue();
+        double d3 = Math.sqrt(d0 * d0 + d2 * d2);
+        this.setXRot(Mth.wrapDegrees((float)(-(Mth.atan2(d1, d3) * 180.0F / (float)Math.PI))));
+        this.setYRot(Mth.wrapDegrees((float)(Mth.atan2(d2, d0) * 180.0F / (float)Math.PI) - 90.0F));
+        this.setYHeadRot(this.getYRot());
+        this.xRotO = this.getXRot();
+        this.yRotO = this.getYRot();
+    }
+
     public boolean updateFluidHeightAndDoFluidPushing(TagKey<Fluid> p_204032_, double p_204033_) {
         if (this.touchingUnloadedChunk()) {
             return false;
@@ -3459,10 +_,10 @@
 
     public boolean touchingUnloadedChunk() {
         AABB aabb = this.getBoundingBox().inflate(1.0);
-        int i = Mth.floor(aabb.minX);
-        int j = Mth.ceil(aabb.maxX);
-        int k = Mth.floor(aabb.minZ);
-        int l = Mth.ceil(aabb.maxZ);
+        me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(aabb.minX);
+        me.alphamode.mcbig.math.BigInteger j = Mth.bigCeil(aabb.maxX);
+        me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(aabb.minZ);
+        me.alphamode.mcbig.math.BigInteger l = Mth.bigCeil(aabb.maxZ);
         return !this.level().hasChunksAt(i, k, j, l);
     }
 
@@ -3498,6 +_,10 @@
         return this.position;
     }
 
+    public me.alphamode.mcbig.core.BigVec3 bigPosition() {
+        return this.bigPosition;
+    }
+
     public Vec3 trackingPosition() {
         return this.position();
     }
@@ -3535,14 +_,18 @@
         this.setDeltaMovement(new Vec3(p_20335_, p_20336_, p_20337_));
     }
 
-    public final int getBlockX() {
-        return this.blockPosition.getX();
+    public final me.alphamode.mcbig.math.BigInteger getBlockX() {
+        return this.blockPosition.getBigX();
     }
 
     public final double getX() {
         return this.position.x;
     }
 
+    public final me.alphamode.mcbig.math.BigDecimal getBigX() {
+        return this.bigPosition.x;
+    }
+
     public double getX(double p_20166_) {
         return this.position.x + (double)this.getBbWidth() * p_20166_;
     }
@@ -3555,6 +_,10 @@
         return this.blockPosition.getY();
     }
 
+    public final me.alphamode.mcbig.math.BigInteger getBigBlockY() {
+        return this.blockPosition.getBigY();
+    }
+
     public final double getY() {
         return this.position.y;
     }
@@ -3571,14 +_,18 @@
         return this.position.y + (double)this.eyeHeight;
     }
 
-    public final int getBlockZ() {
-        return this.blockPosition.getZ();
+    public final me.alphamode.mcbig.math.BigInteger getBlockZ() {
+        return this.blockPosition.getBigZ();
     }
 
     public final double getZ() {
         return this.position.z;
     }
 
+    public final me.alphamode.mcbig.math.BigDecimal getBigZ() {
+        return this.bigPosition.z;
+    }
+
     public double getZ(double p_20247_) {
         return this.position.z + (double)this.getBbWidth() * p_20247_;
     }
@@ -3587,16 +_,36 @@
         return this.getZ((2.0 * this.random.nextDouble() - 1.0) * p_20263_);
     }
 
-    public final void setPosRaw(double p_20344_, double p_20345_, double p_20346_) {
+    public void setPosRaw(double p_20344_, double p_20345_, double p_20346_) {
         if (this.position.x != p_20344_ || this.position.y != p_20345_ || this.position.z != p_20346_) {
             this.position = new Vec3(p_20344_, p_20345_, p_20346_);
-            int i = Mth.floor(p_20344_);
-            int j = Mth.floor(p_20345_);
-            int k = Mth.floor(p_20346_);
-            if (i != this.blockPosition.getX() || j != this.blockPosition.getY() || k != this.blockPosition.getZ()) {
-                this.blockPosition = new BlockPos(i, j, k);
-                this.inBlockState = null;
-                if (SectionPos.blockToSectionCoord(i) != this.chunkPosition.x || SectionPos.blockToSectionCoord(k) != this.chunkPosition.z) {
+            this.bigPosition = this.position.toBig();
+            me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(p_20344_);
+            me.alphamode.mcbig.math.BigInteger j = Mth.bigFloor(p_20345_);
+            me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(p_20346_);
+            if (!i.equals(this.blockPosition.getBigX()) || !j.equals(this.blockPosition.getBigY()) || !k.equals(this.blockPosition.getBigZ())) {
+                this.blockPosition = new BlockPos(i, j, k);
+                this.inBlockState = null;
+                if (!SectionPos.blockToSectionCoord(i).equals(this.chunkPosition.x()) || !SectionPos.blockToSectionCoord(k).equals(this.chunkPosition.z())) {
+                    this.chunkPosition = new ChunkPos(this.blockPosition);
+                }
+            }
+
+            this.levelCallback.onMove();
+        }
+    }
+
+    public void setPosRaw(me.alphamode.mcbig.math.BigDecimal p_20344_, double p_20345_, me.alphamode.mcbig.math.BigDecimal p_20346_) {
+        if (!this.bigPosition.x.equals(p_20344_) || this.bigPosition.y != p_20345_ || !this.bigPosition.z.equals(p_20346_)) {
+            this.bigPosition = new me.alphamode.mcbig.core.BigVec3(p_20344_, p_20345_, p_20346_);
+            this.position = this.bigPosition.toVanilla();
+            me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(p_20344_);
+            me.alphamode.mcbig.math.BigInteger j = Mth.bigFloor(p_20345_);
+            me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(p_20346_);
+            if (!i.equals(this.blockPosition.getBigX()) || !j.equals(this.blockPosition.getBigY()) || !k.equals(this.blockPosition.getBigZ())) {
+                this.blockPosition = new BlockPos(i, j, k);
+                this.inBlockState = null;
+                if (!SectionPos.blockToSectionCoord(i).equals(this.chunkPosition.x()) || !SectionPos.blockToSectionCoord(k).equals(this.chunkPosition.z())) {
                     this.chunkPosition = new ChunkPos(this.blockPosition);
                 }
             }
