--- a/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
+++ b/net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
@@ -10,15 +_,15 @@
     public static final SimpleCommandExceptionType ERROR_EXPECTED_DOUBLE = new SimpleCommandExceptionType(Component.translatable("argument.pos.missing.double"));
     public static final SimpleCommandExceptionType ERROR_EXPECTED_INT = new SimpleCommandExceptionType(Component.translatable("argument.pos.missing.int"));
     private final boolean relative;
-    private final double value;
+    private final me.alphamode.mcbig.math.BigDecimal value;
 
-    public WorldCoordinate(boolean p_120864_, double p_120865_) {
+    public WorldCoordinate(boolean p_120864_, me.alphamode.mcbig.math.BigDecimal p_120865_) {
         this.relative = p_120864_;
         this.value = p_120865_;
     }
 
-    public double get(double p_120868_) {
-        return this.relative ? this.value + p_120868_ : this.value;
+    public me.alphamode.mcbig.math.BigDecimal get(me.alphamode.mcbig.math.BigDecimal p_120868_) {
+        return this.relative ? this.value.add(p_120868_) : this.value;
     }
 
     public static WorldCoordinate parseDouble(StringReader p_120872_, boolean p_120873_) throws CommandSyntaxException {
@@ -29,13 +_,13 @@
         } else {
             boolean flag = isRelative(p_120872_);
             int i = p_120872_.getCursor();
-            double d0 = p_120872_.canRead() && p_120872_.peek() != ' ' ? p_120872_.readDouble() : 0.0;
+            me.alphamode.mcbig.math.BigDecimal d0 = p_120872_.canRead() && p_120872_.peek() != ' ' ? me.alphamode.mcbig.math.BigDecimal.command(p_120872_) : me.alphamode.mcbig.math.BigDecimal.ZERO;
             String s = p_120872_.getString().substring(i, p_120872_.getCursor());
             if (flag && s.isEmpty()) {
-                return new WorldCoordinate(true, 0.0);
+                return new WorldCoordinate(true, me.alphamode.mcbig.math.BigDecimal.ZERO);
             } else {
                 if (!s.contains(".") && !flag && p_120873_) {
-                    d0 += 0.5;
+                    d0 = d0.add(me.alphamode.mcbig.core.BigConstants.AABB);
                 }
 
                 return new WorldCoordinate(flag, d0);
@@ -50,11 +_,11 @@
             throw ERROR_EXPECTED_INT.createWithContext(p_120870_);
         } else {
             boolean flag = isRelative(p_120870_);
-            double d0;
+            me.alphamode.mcbig.math.BigDecimal d0;
             if (p_120870_.canRead() && p_120870_.peek() != ' ') {
-                d0 = flag ? p_120870_.readDouble() : (double)p_120870_.readInt();
+                d0 = flag ? me.alphamode.mcbig.math.BigDecimal.command(p_120870_) : me.alphamode.mcbig.math.BigInteger.command(p_120870_).toBigDecimal();
             } else {
-                d0 = 0.0;
+                d0 = me.alphamode.mcbig.math.BigDecimal.ZERO;
             }
 
             return new WorldCoordinate(flag, d0);
@@ -84,7 +_,7 @@
             if (this.relative != worldcoordinate.relative) {
                 return false;
             } else {
-                return Double.compare(worldcoordinate.value, this.value) == 0;
+                return worldcoordinate.value.compareTo(this.value) == 0;
             }
         }
     }
@@ -92,7 +_,7 @@
     @Override
     public int hashCode() {
         int i = this.relative ? 1 : 0;
-        long j = Double.doubleToLongBits(this.value);
+        long j = Double.doubleToLongBits(this.value.doubleValue());
         return 31 * i + (int)(j ^ j >>> 32);
     }
 
