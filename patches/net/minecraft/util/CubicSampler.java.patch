--- a/net/minecraft/util/CubicSampler.java
+++ b/net/minecraft/util/CubicSampler.java
@@ -10,27 +_,27 @@
     private CubicSampler() {
     }
 
-    public static Vec3 gaussianSampleVec3(Vec3 p_130039_, CubicSampler.Vec3Fetcher p_130040_) {
-        int i = Mth.floor(p_130039_.x());
+    public static Vec3 gaussianSampleVec3(me.alphamode.mcbig.core.BigVec3 p_130039_, CubicSampler.Vec3Fetcher p_130040_) {
+        me.alphamode.mcbig.math.BigInteger i = Mth.bigFloor(p_130039_.bigX());
         int j = Mth.floor(p_130039_.y());
-        int k = Mth.floor(p_130039_.z());
-        double d0 = p_130039_.x() - (double)i;
+        me.alphamode.mcbig.math.BigInteger k = Mth.bigFloor(p_130039_.bigZ());
+        double d0 = p_130039_.bigX().subtract(i.toBigDecimal()).doubleValue();
         double d1 = p_130039_.y() - (double)j;
-        double d2 = p_130039_.z() - (double)k;
+        double d2 = p_130039_.bigZ().subtract(k.toBigDecimal()).doubleValue();
         double d3 = 0.0;
         Vec3 vec3 = Vec3.ZERO;
 
-        for(int l = 0; l < 6; ++l) {
+        for(int l = 0; l < GAUSSIAN_SAMPLE_BREADTH; ++l) {
             double d4 = Mth.lerp(d0, GAUSSIAN_SAMPLE_KERNEL[l + 1], GAUSSIAN_SAMPLE_KERNEL[l]);
-            int i1 = i - 2 + l;
+            me.alphamode.mcbig.math.BigInteger i1 = i.subtract(GAUSSIAN_SAMPLE_RADIUS + l);
 
-            for(int j1 = 0; j1 < 6; ++j1) {
+            for(int j1 = 0; j1 < GAUSSIAN_SAMPLE_BREADTH; ++j1) {
                 double d5 = Mth.lerp(d1, GAUSSIAN_SAMPLE_KERNEL[j1 + 1], GAUSSIAN_SAMPLE_KERNEL[j1]);
-                int k1 = j - 2 + j1;
+                me.alphamode.mcbig.math.BigInteger k1 = me.alphamode.mcbig.math.BigInteger.val(j - GAUSSIAN_SAMPLE_RADIUS + j1);
 
-                for(int l1 = 0; l1 < 6; ++l1) {
+                for(int l1 = 0; l1 < GAUSSIAN_SAMPLE_BREADTH; ++l1) {
                     double d6 = Mth.lerp(d2, GAUSSIAN_SAMPLE_KERNEL[l1 + 1], GAUSSIAN_SAMPLE_KERNEL[l1]);
-                    int i2 = k - 2 + l1;
+                    me.alphamode.mcbig.math.BigInteger i2 = k.subtract(2 + l1);
                     double d7 = d4 * d5 * d6;
                     d3 += d7;
                     vec3 = vec3.add(p_130040_.fetch(i1, k1, i2).scale(d7));
@@ -43,6 +_,6 @@
 
     @FunctionalInterface
     public interface Vec3Fetcher {
-        Vec3 fetch(int p_130042_, int p_130043_, int p_130044_);
+        Vec3 fetch(me.alphamode.mcbig.math.BigInteger p_130042_, me.alphamode.mcbig.math.BigInteger p_130043_, me.alphamode.mcbig.math.BigInteger p_130044_);
     }
 }
