--- a/net/minecraft/core/BlockPos.java
+++ b/net/minecraft/core/BlockPos.java
@@ -30,11 +_,11 @@
 import org.slf4j.Logger;
 
 @Immutable
-public class BlockPos extends Vec3i {
-    public static final Codec<BlockPos> CODEC = Codec.INT_STREAM
+public class BlockPos extends me.alphamode.mcbig.core.Vec3l {
+    public static final Codec<BlockPos> CODEC = me.alphamode.mcbig.core.ModdedCodec.STRING_STREAM
         .<BlockPos>comapFlatMap(
-            p_121967_ -> Util.fixedSize(p_121967_, 3).map(p_175270_ -> new BlockPos(p_175270_[0], p_175270_[1], p_175270_[2])),
-            p_121924_ -> IntStream.of(p_121924_.getX(), p_121924_.getY(), p_121924_.getZ())
+            p_121967_ -> Util.fixedSize(p_121967_, 3).map(p_175270_ -> new BlockPos(new me.alphamode.mcbig.math.BigInteger(p_175270_[0]), new me.alphamode.mcbig.math.BigInteger(p_175270_[1]), new me.alphamode.mcbig.math.BigInteger(p_175270_[2]))),
+            p_121924_ -> Stream.of(p_121924_.getBigX().toString(), p_121924_.getBigY().toString(), p_121924_.getBigZ().toString())
         )
         .stable();
     public static final StreamCodec<ByteBuf, BlockPos> STREAM_CODEC = new StreamCodec<ByteBuf, BlockPos>() {
@@ -48,6 +_,7 @@
     };
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final BlockPos ZERO = new BlockPos(0, 0, 0);
+    public static final BlockPos MAX_VALUE = new BlockPos(me.alphamode.mcbig.core.BigConstants.Ints.REALLY_BIG_NUMBER, me.alphamode.mcbig.core.BigConstants.Ints.REALLY_BIG_NUMBER, me.alphamode.mcbig.core.BigConstants.Ints.REALLY_BIG_NUMBER);
     private static final int PACKED_X_LENGTH = 1 + Mth.log2(Mth.smallestEncompassingPowerOfTwo(30000000));
     private static final int PACKED_Z_LENGTH = PACKED_X_LENGTH;
     public static final int PACKED_Y_LENGTH = 64 - PACKED_X_LENGTH - PACKED_Z_LENGTH;
@@ -58,20 +_,28 @@
     private static final int Z_OFFSET = PACKED_Y_LENGTH;
     private static final int X_OFFSET = PACKED_Y_LENGTH + PACKED_Z_LENGTH;
 
-    public BlockPos(int p_121869_, int p_121870_, int p_121871_) {
+    public BlockPos(long p_121869_, long p_121870_, long p_121871_) {
+        super(me.alphamode.mcbig.math.BigInteger.val(p_121869_), me.alphamode.mcbig.math.BigInteger.val(p_121870_), me.alphamode.mcbig.math.BigInteger.val(p_121871_));
+    }
+
+    public BlockPos(byte[] p_121869_, byte[] p_121870_, byte[] p_121871_) {
+        super(new me.alphamode.mcbig.math.BigInteger(p_121869_), new me.alphamode.mcbig.math.BigInteger(p_121870_), new me.alphamode.mcbig.math.BigInteger(p_121871_));
+    }
+
+    public BlockPos(me.alphamode.mcbig.math.BigInteger p_121869_, me.alphamode.mcbig.math.BigInteger p_121870_, me.alphamode.mcbig.math.BigInteger p_121871_) {
         super(p_121869_, p_121870_, p_121871_);
     }
 
+    public BlockPos(me.alphamode.mcbig.math.BigInteger p_121869_, long p_121870_, me.alphamode.mcbig.math.BigInteger p_121871_) {
+        this(p_121869_, me.alphamode.mcbig.math.BigInteger.val(p_121870_), p_121871_);
+    }
+
     public BlockPos(Vec3i p_121877_) {
         this(p_121877_.getX(), p_121877_.getY(), p_121877_.getZ());
     }
 
-    public static long offset(long p_121916_, Direction p_121917_) {
-        return offset(p_121916_, p_121917_.getStepX(), p_121917_.getStepY(), p_121917_.getStepZ());
-    }
-
-    public static long offset(long p_121911_, int p_121912_, int p_121913_, int p_121914_) {
-        return asLong(getX(p_121911_) + p_121912_, getY(p_121911_) + p_121913_, getZ(p_121911_) + p_121914_);
+    public BlockPos(me.alphamode.mcbig.core.Vec3l p_121877_) {
+        this(p_121877_.getBigX(), p_121877_.getBigY(), p_121877_.getBigZ());
     }
 
     public static int getX(long p_121984_) {
@@ -91,22 +_,30 @@
     }
 
     public static BlockPos containing(double p_275310_, double p_275414_, double p_275737_) {
-        return new BlockPos(Mth.floor(p_275310_), Mth.floor(p_275414_), Mth.floor(p_275737_));
+        return new BlockPos(Mth.bigFloor(p_275310_), Mth.bigFloor(p_275414_), Mth.bigFloor(p_275737_));
+    }
+
+    public static BlockPos containing(me.alphamode.mcbig.math.BigDecimal p_275310_, double p_275414_, me.alphamode.mcbig.math.BigDecimal p_275737_) {
+        return new BlockPos(Mth.bigFloor(p_275310_), Mth.bigFloor(p_275414_), Mth.bigFloor(p_275737_));
     }
 
     public static BlockPos containing(Position p_275443_) {
         return containing(p_275443_.x(), p_275443_.y(), p_275443_.z());
     }
 
+    public static BlockPos containing(me.alphamode.mcbig.core.BigPosition p_275443_) {
+        return containing(p_275443_.bigX(), p_275443_.y(), p_275443_.bigZ());
+    }
+
     public static BlockPos min(BlockPos p_333745_, BlockPos p_333943_) {
         return new BlockPos(
-            Math.min(p_333745_.getX(), p_333943_.getX()), Math.min(p_333745_.getY(), p_333943_.getY()), Math.min(p_333745_.getZ(), p_333943_.getZ())
+            p_333745_.getBigX().min(p_333943_.getBigX()), p_333745_.getBigY().min(p_333943_.getBigY()), p_333745_.getBigZ().min(p_333943_.getBigZ())
         );
     }
 
     public static BlockPos max(BlockPos p_334008_, BlockPos p_333743_) {
         return new BlockPos(
-            Math.max(p_334008_.getX(), p_333743_.getX()), Math.max(p_334008_.getY(), p_333743_.getY()), Math.max(p_334008_.getZ(), p_333743_.getZ())
+            p_334008_.getBigX().max(p_333743_.getBigX()), p_334008_.getBigY().max(p_333743_.getBigY()), p_334008_.getBigZ().max(p_333743_.getBigZ())
         );
     }
 
@@ -128,7 +_,13 @@
     public BlockPos offset(int p_121973_, int p_121974_, int p_121975_) {
         return p_121973_ == 0 && p_121974_ == 0 && p_121975_ == 0
             ? this
-            : new BlockPos(this.getX() + p_121973_, this.getY() + p_121974_, this.getZ() + p_121975_);
+            : new BlockPos(this.getBigX().add(p_121973_), this.getBigY().add(p_121974_), this.getBigZ().add(p_121975_));
+    }
+
+    public BlockPos offset(me.alphamode.mcbig.math.BigInteger p_121973_, me.alphamode.mcbig.math.BigInteger p_121974_, me.alphamode.mcbig.math.BigInteger p_121975_) {
+        return p_121973_.equals(me.alphamode.mcbig.math.BigInteger.ZERO) && p_121974_.equals(me.alphamode.mcbig.math.BigInteger.ZERO) && p_121975_.equals(me.alphamode.mcbig.math.BigInteger.ZERO)
+                ? this
+                : new BlockPos(this.getBigX().add(p_121973_), this.getBigY().add(p_121974_), this.getBigZ().add(p_121975_));
     }
 
     public Vec3 getCenter() {
@@ -139,6 +_,14 @@
         return this.offset(p_121956_.getX(), p_121956_.getY(), p_121956_.getZ());
     }
 
+    public BlockPos subtract(me.alphamode.mcbig.core.Vec3l p_121997_) {
+        return this.offset(p_121997_.getBigX().negate(), p_121997_.getBigY().negate(), p_121997_.getBigZ().negate());
+    }
+
+    public BlockPos offset(me.alphamode.mcbig.core.Vec3l p_121956_) {
+        return this.offset(p_121956_.getBigX(), p_121956_.getBigY(), p_121956_.getBigZ());
+    }
+
     public BlockPos subtract(Vec3i p_121997_) {
         return this.offset(-p_121997_.getX(), -p_121997_.getY(), -p_121997_.getZ());
     }
@@ -147,7 +_,7 @@
         if (p_175263_ == 1) {
             return this;
         } else {
-            return p_175263_ == 0 ? ZERO : new BlockPos(this.getX() * p_175263_, this.getY() * p_175263_, this.getZ() * p_175263_);
+            return p_175263_ == 0 ? ZERO : new BlockPos(this.getBigX().multiply(p_175263_), this.getBigY().multiply(p_175263_), this.getBigZ().multiply(p_175263_));
         }
     }
 
@@ -200,14 +_,14 @@
     }
 
     public BlockPos relative(Direction p_121946_) {
-        return new BlockPos(this.getX() + p_121946_.getStepX(), this.getY() + p_121946_.getStepY(), this.getZ() + p_121946_.getStepZ());
+        return new BlockPos(this.getBigX().add(p_121946_.getStepX()), this.getBigY().add(p_121946_.getStepY()), this.getBigZ().add(p_121946_.getStepZ()));
     }
 
     public BlockPos relative(Direction p_121948_, int p_121949_) {
         return p_121949_ == 0
             ? this
             : new BlockPos(
-                this.getX() + p_121948_.getStepX() * p_121949_, this.getY() + p_121948_.getStepY() * p_121949_, this.getZ() + p_121948_.getStepZ() * p_121949_
+                this.getBigX().add(p_121948_.getStepX() * p_121949_), this.getBigY().add(p_121948_.getStepY() * p_121949_), this.getBigZ().add(p_121948_.getStepZ() * p_121949_)
             );
     }
 
@@ -218,7 +_,7 @@
             int i = p_121943_ == Direction.Axis.X ? p_121944_ : 0;
             int j = p_121943_ == Direction.Axis.Y ? p_121944_ : 0;
             int k = p_121943_ == Direction.Axis.Z ? p_121944_ : 0;
-            return new BlockPos(this.getX() + i, this.getY() + j, this.getZ() + k);
+            return new BlockPos(this.getBigX().add(i), this.getBigY().add(j), this.getBigZ().add(k));
         }
     }
 
@@ -228,24 +_,24 @@
             default:
                 return this;
             case CLOCKWISE_90:
-                return new BlockPos(-this.getZ(), this.getY(), this.getX());
+                return new BlockPos(this.getBigZ().negate(), this.getBigY(), this.getBigX());
             case CLOCKWISE_180:
-                return new BlockPos(-this.getX(), this.getY(), -this.getZ());
+                return new BlockPos(this.getBigX().negate(), this.getBigY(), this.getBigZ().negate());
             case COUNTERCLOCKWISE_90:
-                return new BlockPos(this.getZ(), this.getY(), -this.getX());
+                return new BlockPos(this.getBigZ(), this.getBigY(), this.getBigX().negate());
         }
     }
 
-    public BlockPos cross(Vec3i p_122011_) {
+    public BlockPos cross(me.alphamode.mcbig.core.Vec3l p_122011_) {
         return new BlockPos(
-            this.getY() * p_122011_.getZ() - this.getZ() * p_122011_.getY(),
-            this.getZ() * p_122011_.getX() - this.getX() * p_122011_.getZ(),
-            this.getX() * p_122011_.getY() - this.getY() * p_122011_.getX()
+            this.getBigY().multiply(p_122011_.getBigZ()).subtract(this.getBigZ().multiply(p_122011_.getBigY())),
+            this.getBigZ().multiply(p_122011_.getBigX()).subtract(this.getBigX().multiply(p_122011_.getBigZ())),
+            this.getBigX().multiply(p_122011_.getBigY()).subtract(this.getBigY().multiply(p_122011_.getBigX()))
         );
     }
 
     public BlockPos atY(int p_175289_) {
-        return new BlockPos(this.getX(), p_175289_, this.getZ());
+        return new BlockPos(this.getBigX(), me.alphamode.mcbig.math.BigInteger.val(p_175289_), this.getBigZ());
     }
 
     public BlockPos immutable() {
@@ -253,7 +_,7 @@
     }
 
     public BlockPos.MutableBlockPos mutable() {
-        return new BlockPos.MutableBlockPos(this.getX(), this.getY(), this.getZ());
+        return new BlockPos.MutableBlockPos(this.getBigX(), this.getBigY(), this.getBigZ());
     }
 
     public BlockPos step(Direction p_340635_) {
@@ -264,12 +_,12 @@
         return randomBetweenClosed(
             p_235651_,
             p_235652_,
-            p_235653_.getX() - p_235654_,
-            p_235653_.getY() - p_235654_,
-            p_235653_.getZ() - p_235654_,
-            p_235653_.getX() + p_235654_,
-            p_235653_.getY() + p_235654_,
-            p_235653_.getZ() + p_235654_
+            p_235653_.getBigX().subtract(p_235654_),
+            p_235653_.getBigY().subtract(p_235654_),
+            p_235653_.getBigZ().subtract(p_235654_),
+            p_235653_.getBigX().add(p_235654_),
+            p_235653_.getBigY().add(p_235654_),
+            p_235653_.getBigZ().add(p_235654_)
         );
     }
 
@@ -279,11 +_,11 @@
     }
 
     public static Iterable<BlockPos> randomBetweenClosed(
-        RandomSource p_235642_, int p_235643_, int p_235644_, int p_235645_, int p_235646_, int p_235647_, int p_235648_, int p_235649_
+        RandomSource p_235642_, int p_235643_, me.alphamode.mcbig.math.BigInteger p_235644_, me.alphamode.mcbig.math.BigInteger p_235645_, me.alphamode.mcbig.math.BigInteger p_235646_, me.alphamode.mcbig.math.BigInteger p_235647_, me.alphamode.mcbig.math.BigInteger p_235648_, me.alphamode.mcbig.math.BigInteger p_235649_
     ) {
-        int i = p_235647_ - p_235644_ + 1;
-        int j = p_235648_ - p_235645_ + 1;
-        int k = p_235649_ - p_235646_ + 1;
+        int i = p_235647_.subtract(p_235644_).add().intValue();
+        int j = p_235648_.subtract(p_235645_).add().intValue();
+        int k = p_235649_.subtract(p_235646_).add().intValue();
         return () -> new AbstractIterator<BlockPos>() {
                 final BlockPos.MutableBlockPos nextPos = new BlockPos.MutableBlockPos();
                 int counter = p_235643_;
@@ -293,7 +_,7 @@
                         return this.endOfData();
                     } else {
                         BlockPos blockpos = this.nextPos
-                            .set(p_235644_ + p_235642_.nextInt(i), p_235645_ + p_235642_.nextInt(j), p_235646_ + p_235642_.nextInt(k));
+                            .set(p_235644_.add(p_235642_.nextInt(i)), p_235645_.add(p_235642_.nextInt(j)), p_235646_.add(p_235642_.nextInt(k)));
                         --this.counter;
                         return blockpos;
                     }
@@ -303,9 +_,9 @@
 
     public static Iterable<BlockPos> withinManhattan(BlockPos p_121926_, int p_121927_, int p_121928_, int p_121929_) {
         int i = p_121927_ + p_121928_ + p_121929_;
-        int j = p_121926_.getX();
-        int k = p_121926_.getY();
-        int l = p_121926_.getZ();
+        me.alphamode.mcbig.math.BigInteger j = p_121926_.getBigX();
+        me.alphamode.mcbig.math.BigInteger k = p_121926_.getBigY();
+        me.alphamode.mcbig.math.BigInteger l = p_121926_.getBigZ();
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
                 private int currentDepth;
@@ -318,7 +_,7 @@
                 protected BlockPos computeNext() {
                     if (this.zMirror) {
                         this.zMirror = false;
-                        this.cursor.setZ(l - (this.cursor.getZ() - l));
+                        this.cursor.setZ(l.subtract((this.cursor.getBigZ().subtract(l))));
                         return this.cursor;
                     } else {
                         BlockPos blockpos;
@@ -344,7 +_,7 @@
                             int k1 = this.currentDepth - Math.abs(i1) - Math.abs(j1);
                             if (k1 <= p_121929_) {
                                 this.zMirror = k1 != 0;
-                                blockpos = this.cursor.set(j + i1, k + j1, l + k1);
+                                blockpos = this.cursor.set(j.intValue() + i1, k.intValue() + j1, l.intValue() + k1);
                             }
                         }
 
@@ -370,12 +_,12 @@
 
     public static Iterable<BlockPos> betweenClosed(BlockPos p_121941_, BlockPos p_121942_) {
         return betweenClosed(
-            Math.min(p_121941_.getX(), p_121942_.getX()),
-            Math.min(p_121941_.getY(), p_121942_.getY()),
-            Math.min(p_121941_.getZ(), p_121942_.getZ()),
-            Math.max(p_121941_.getX(), p_121942_.getX()),
-            Math.max(p_121941_.getY(), p_121942_.getY()),
-            Math.max(p_121941_.getZ(), p_121942_.getZ())
+            p_121941_.getBigX().min(p_121942_.getBigX()),
+            p_121941_.getBigY().min(p_121942_.getBigY()),
+            p_121941_.getBigZ().min(p_121942_.getBigZ()),
+            p_121941_.getBigX().max(p_121942_.getBigX()),
+            p_121941_.getBigY().max(p_121942_.getBigY()),
+            p_121941_.getBigZ().max(p_121942_.getBigZ())
         );
     }
 
@@ -385,34 +_,34 @@
 
     public static Stream<BlockPos> betweenClosedStream(BoundingBox p_121920_) {
         return betweenClosedStream(
-            Math.min(p_121920_.minX(), p_121920_.maxX()),
-            Math.min(p_121920_.minY(), p_121920_.maxY()),
-            Math.min(p_121920_.minZ(), p_121920_.maxZ()),
-            Math.max(p_121920_.minX(), p_121920_.maxX()),
-            Math.max(p_121920_.minY(), p_121920_.maxY()),
-            Math.max(p_121920_.minZ(), p_121920_.maxZ())
+            p_121920_.minX().min(p_121920_.maxX()),
+            p_121920_.minY().min(p_121920_.maxY()),
+            p_121920_.minZ().min(p_121920_.maxZ()),
+            p_121920_.minX().max(p_121920_.maxX()),
+            p_121920_.minY().max(p_121920_.maxY()),
+            p_121920_.minZ().max(p_121920_.maxZ())
         );
     }
 
     public static Stream<BlockPos> betweenClosedStream(AABB p_121922_) {
         return betweenClosedStream(
-            Mth.floor(p_121922_.minX),
-            Mth.floor(p_121922_.minY),
-            Mth.floor(p_121922_.minZ),
-            Mth.floor(p_121922_.maxX),
-            Mth.floor(p_121922_.maxY),
-            Mth.floor(p_121922_.maxZ)
+            Mth.bigFloor(p_121922_.minX),
+            Mth.bigFloor(p_121922_.minY),
+            Mth.bigFloor(p_121922_.minZ),
+            Mth.bigFloor(p_121922_.maxX),
+            Mth.bigFloor(p_121922_.maxY),
+            Mth.bigFloor(p_121922_.maxZ)
         );
     }
 
-    public static Stream<BlockPos> betweenClosedStream(int p_121887_, int p_121888_, int p_121889_, int p_121890_, int p_121891_, int p_121892_) {
+    public static Stream<BlockPos> betweenClosedStream(me.alphamode.mcbig.math.BigInteger p_121887_, me.alphamode.mcbig.math.BigInteger p_121888_, me.alphamode.mcbig.math.BigInteger p_121889_, me.alphamode.mcbig.math.BigInteger p_121890_, me.alphamode.mcbig.math.BigInteger p_121891_, me.alphamode.mcbig.math.BigInteger p_121892_) {
         return StreamSupport.stream(betweenClosed(p_121887_, p_121888_, p_121889_, p_121890_, p_121891_, p_121892_).spliterator(), false);
     }
 
-    public static Iterable<BlockPos> betweenClosed(int p_121977_, int p_121978_, int p_121979_, int p_121980_, int p_121981_, int p_121982_) {
-        int i = p_121980_ - p_121977_ + 1;
-        int j = p_121981_ - p_121978_ + 1;
-        int k = p_121982_ - p_121979_ + 1;
+    public static Iterable<BlockPos> betweenClosed(me.alphamode.mcbig.math.BigInteger p_121977_, me.alphamode.mcbig.math.BigInteger p_121978_, me.alphamode.mcbig.math.BigInteger p_121979_, me.alphamode.mcbig.math.BigInteger p_121980_, me.alphamode.mcbig.math.BigInteger p_121981_, me.alphamode.mcbig.math.BigInteger p_121982_) {
+        int i = p_121980_.subtract(p_121977_).intValue() + 1;
+        int j = p_121981_.subtract(p_121978_).intValue() + 1;
+        int k = p_121982_.subtract(p_121979_).intValue() + 1;
         int l = i * j * k;
         return () -> new AbstractIterator<BlockPos>() {
                 private final BlockPos.MutableBlockPos cursor = new BlockPos.MutableBlockPos();
@@ -427,7 +_,7 @@
                         int k1 = j1 % j;
                         int l1 = j1 / j;
                         ++this.index;
-                        return this.cursor.set(p_121977_ + i1, p_121978_ + k1, p_121979_ + l1);
+                        return this.cursor.set(p_121977_.add(i1), p_121978_.add(k1), p_121979_.add(l1));
                     }
                 }
             };
@@ -442,15 +_,15 @@
                 private int leg = -1;
                 private int legSize;
                 private int legIndex;
-                private int lastX = this.cursor.getX();
-                private int lastY = this.cursor.getY();
-                private int lastZ = this.cursor.getZ();
+                private me.alphamode.mcbig.math.BigInteger lastX = this.cursor.getBigX();
+                private me.alphamode.mcbig.math.BigInteger lastY = this.cursor.getBigY();
+                private me.alphamode.mcbig.math.BigInteger lastZ = this.cursor.getBigZ();
 
                 protected BlockPos.MutableBlockPos computeNext() {
                     this.cursor.set(this.lastX, this.lastY, this.lastZ).move(this.directions[(this.leg + 4) % 4]);
-                    this.lastX = this.cursor.getX();
-                    this.lastY = this.cursor.getY();
-                    this.lastZ = this.cursor.getZ();
+                    this.lastX = this.cursor.getBigX();
+                    this.lastY = this.cursor.getBigY();
+                    this.lastZ = this.cursor.getBigZ();
                     if (this.legIndex >= this.legSize) {
                         if (this.leg >= this.legs) {
                             return this.endOfData();
@@ -471,7 +_,7 @@
         BlockPos p_278078_, int p_277385_, int p_277666_, BiConsumer<BlockPos, Consumer<BlockPos>> p_277755_, Predicate<BlockPos> p_278094_
     ) {
         Queue<Pair<BlockPos, Integer>> queue = new ArrayDeque<>();
-        LongSet longset = new LongOpenHashSet();
+        it.unimi.dsi.fastutil.objects.ObjectSet<BlockPos> longset = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>();
         queue.add(Pair.of(p_278078_, 0));
         int i = 0;
 
@@ -479,7 +_,7 @@
             Pair<BlockPos, Integer> pair = queue.poll();
             BlockPos blockpos = pair.getLeft();
             int j = pair.getRight();
-            long k = blockpos.asLong();
+            BlockPos k = blockpos;
             if (longset.add(k) && p_278094_.test(blockpos)) {
                 if (++i >= p_277666_) {
                     return i;
@@ -499,7 +_,15 @@
             this(0, 0, 0);
         }
 
-        public MutableBlockPos(int p_122130_, int p_122131_, int p_122132_) {
+        public MutableBlockPos(long p_122130_, long p_122131_, long p_122132_) {
+            super(p_122130_, p_122131_, p_122132_);
+        }
+
+        public MutableBlockPos(me.alphamode.mcbig.math.BigInteger p_122130_, long p_122131_, me.alphamode.mcbig.math.BigInteger p_122132_) {
+            super(p_122130_, p_122131_, p_122132_);
+        }
+
+        public MutableBlockPos(me.alphamode.mcbig.math.BigInteger p_122130_, me.alphamode.mcbig.math.BigInteger p_122131_, me.alphamode.mcbig.math.BigInteger p_122132_) {
             super(p_122130_, p_122131_, p_122132_);
         }
 
@@ -536,19 +_,37 @@
             return super.rotate(p_122138_).immutable();
         }
 
-        public BlockPos.MutableBlockPos set(int p_122179_, int p_122180_, int p_122181_) {
-            this.setX(p_122179_);
-            this.setY(p_122180_);
-            this.setZ(p_122181_);
+        public BlockPos.MutableBlockPos set(long p_122179_, long p_122180_, long p_122181_) {
+            this.setX(me.alphamode.mcbig.math.BigInteger.val(p_122179_));
+            this.setY(me.alphamode.mcbig.math.BigInteger.val(p_122180_));
+            this.setZ(me.alphamode.mcbig.math.BigInteger.val(p_122181_));
+            return this;
+        }
+
+        public BlockPos.MutableBlockPos set(me.alphamode.mcbig.math.BigInteger x, int y, me.alphamode.mcbig.math.BigInteger z) {
+            this.setX(x);
+            this.setY(y);
+            this.setZ(z);
+            return this;
+        }
+
+        public BlockPos.MutableBlockPos set(me.alphamode.mcbig.math.BigInteger x, me.alphamode.mcbig.math.BigInteger y, me.alphamode.mcbig.math.BigInteger z) {
+            this.setX(x);
+            this.setY(y);
+            this.setZ(z);
             return this;
         }
 
         public BlockPos.MutableBlockPos set(double p_122170_, double p_122171_, double p_122172_) {
-            return this.set(Mth.floor(p_122170_), Mth.floor(p_122171_), Mth.floor(p_122172_));
-        }
-
-        public BlockPos.MutableBlockPos set(Vec3i p_122191_) {
-            return this.set(p_122191_.getX(), p_122191_.getY(), p_122191_.getZ());
+            return this.set(Mth.bigFloor(p_122170_), Mth.bigFloor(p_122171_), Mth.bigFloor(p_122172_));
+        }
+
+        public BlockPos.MutableBlockPos set(me.alphamode.mcbig.math.BigDecimal x, double y, me.alphamode.mcbig.math.BigDecimal z) {
+            return this.set(Mth.bigFloor(x), Mth.bigFloor(y), Mth.bigFloor(z));
+        }
+
+        public BlockPos.MutableBlockPos set(me.alphamode.mcbig.core.Vec3l p_122191_) {
+            return this.set(p_122191_.getBigX(), p_122191_.getBigY(), p_122191_.getBigZ());
         }
 
         public BlockPos.MutableBlockPos set(long p_122189_) {
@@ -563,16 +_,16 @@
             );
         }
 
-        public BlockPos.MutableBlockPos setWithOffset(Vec3i p_122160_, Direction p_122161_) {
-            return this.set(p_122160_.getX() + p_122161_.getStepX(), p_122160_.getY() + p_122161_.getStepY(), p_122160_.getZ() + p_122161_.getStepZ());
-        }
-
-        public BlockPos.MutableBlockPos setWithOffset(Vec3i p_122155_, int p_122156_, int p_122157_, int p_122158_) {
-            return this.set(p_122155_.getX() + p_122156_, p_122155_.getY() + p_122157_, p_122155_.getZ() + p_122158_);
-        }
-
-        public BlockPos.MutableBlockPos setWithOffset(Vec3i p_175307_, Vec3i p_175308_) {
-            return this.set(p_175307_.getX() + p_175308_.getX(), p_175307_.getY() + p_175308_.getY(), p_175307_.getZ() + p_175308_.getZ());
+        public BlockPos.MutableBlockPos setWithOffset(me.alphamode.mcbig.core.Vec3l p_122160_, Direction p_122161_) {
+            return this.set(p_122160_.getBigX().add(p_122161_.getStepX()), p_122160_.getBigY().add(p_122161_.getStepY()), p_122160_.getBigZ().add(p_122161_.getStepZ()));
+        }
+
+        public BlockPos.MutableBlockPos setWithOffset(me.alphamode.mcbig.core.Vec3l p_122155_, int p_122156_, int p_122157_, int p_122158_) {
+            return this.set(p_122155_.getBigX().add(p_122156_), p_122155_.getBigY().add(p_122157_), p_122155_.getBigZ().add(p_122158_));
+        }
+
+        public BlockPos.MutableBlockPos setWithOffset(me.alphamode.mcbig.core.Vec3l p_175307_, me.alphamode.mcbig.core.Vec3l p_175308_) {
+            return this.set(p_175307_.getBigX().add(p_175308_.getBigX()), p_175307_.getBigY().add(p_175308_.getBigY()), p_175307_.getBigZ().add(p_175308_.getBigZ()));
         }
 
         public BlockPos.MutableBlockPos move(Direction p_122174_) {
@@ -581,43 +_,58 @@
 
         public BlockPos.MutableBlockPos move(Direction p_122176_, int p_122177_) {
             return this.set(
-                this.getX() + p_122176_.getStepX() * p_122177_, this.getY() + p_122176_.getStepY() * p_122177_, this.getZ() + p_122176_.getStepZ() * p_122177_
+                this.getBigX().add(p_122176_.getStepX() * p_122177_), this.getBigY().add(p_122176_.getStepY() * p_122177_), this.getBigZ().add(p_122176_.getStepZ() * p_122177_)
             );
         }
 
         public BlockPos.MutableBlockPos move(int p_122185_, int p_122186_, int p_122187_) {
-            return this.set(this.getX() + p_122185_, this.getY() + p_122186_, this.getZ() + p_122187_);
+            return this.set(this.getBigX().add(p_122185_), this.getBigY().add(p_122186_), this.getBigZ().add(p_122187_));
         }
 
-        public BlockPos.MutableBlockPos move(Vec3i p_122194_) {
-            return this.set(this.getX() + p_122194_.getX(), this.getY() + p_122194_.getY(), this.getZ() + p_122194_.getZ());
+        public BlockPos.MutableBlockPos move(me.alphamode.mcbig.core.Vec3l p_122194_) {
+            return this.set(this.getBigX().add(p_122194_.getBigX()), this.getBigY().add(p_122194_.getBigY()), this.getBigZ().add(p_122194_.getBigZ()));
         }
 
         public BlockPos.MutableBlockPos clamp(Direction.Axis p_122148_, int p_122149_, int p_122150_) {
             switch(p_122148_) {
                 case X:
-                    return this.set(Mth.clamp(this.getX(), p_122149_, p_122150_), this.getY(), this.getZ());
+                    return this.set(Mth.clamp(this.getBigX(), me.alphamode.mcbig.math.BigInteger.val(p_122149_), me.alphamode.mcbig.math.BigInteger.val(p_122150_)), this.getBigY(), this.getBigZ());
                 case Y:
-                    return this.set(this.getX(), Mth.clamp(this.getY(), p_122149_, p_122150_), this.getZ());
+                    return this.set(this.getBigX(), Mth.clamp(this.getBigY(), me.alphamode.mcbig.math.BigInteger.val(p_122149_), me.alphamode.mcbig.math.BigInteger.val(p_122150_)), this.getBigZ());
                 case Z:
-                    return this.set(this.getX(), this.getY(), Mth.clamp(this.getZ(), p_122149_, p_122150_));
+                    return this.set(this.getBigX(), this.getBigY(), Mth.clamp(this.getBigZ(), me.alphamode.mcbig.math.BigInteger.val(p_122149_), me.alphamode.mcbig.math.BigInteger.val(p_122150_)));
                 default:
                     throw new IllegalStateException("Unable to clamp axis " + p_122148_);
             }
         }
 
-        public BlockPos.MutableBlockPos setX(int p_175341_) {
+        public BlockPos.MutableBlockPos setX(me.alphamode.mcbig.math.BigInteger p_175341_) {
             super.setX(p_175341_);
             return this;
         }
 
-        public BlockPos.MutableBlockPos setY(int p_175343_) {
+        public BlockPos.MutableBlockPos setX(long p_175341_) {
+            super.setX(me.alphamode.mcbig.math.BigInteger.val(p_175341_));
+            return this;
+        }
+
+        public BlockPos.MutableBlockPos setY(me.alphamode.mcbig.math.BigInteger p_175343_) {
             super.setY(p_175343_);
             return this;
         }
 
-        public BlockPos.MutableBlockPos setZ(int p_175345_) {
+        public BlockPos.MutableBlockPos setY(long p_175343_) {
+            super.setY(me.alphamode.mcbig.math.BigInteger.val(p_175343_));
+            return this;
+        }
+
+        public BlockPos.MutableBlockPos setZ(me.alphamode.mcbig.math.BigInteger p_175345_) {
             super.setZ(p_175345_);
+            return this;
+        }
+
+        public BlockPos.MutableBlockPos setZ(long p_175345_) {
+            super.setZ(me.alphamode.mcbig.math.BigInteger.val(p_175345_));
             return this;
         }
 
