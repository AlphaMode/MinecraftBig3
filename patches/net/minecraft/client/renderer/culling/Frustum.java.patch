--- a/net/minecraft/client/renderer/culling/Frustum.java
+++ b/net/minecraft/client/renderer/culling/Frustum.java
@@ -13,9 +_,9 @@
     private final FrustumIntersection intersection = new FrustumIntersection();
     private final Matrix4f matrix = new Matrix4f();
     private Vector4f viewVector;
-    private double camX;
+    private me.alphamode.mcbig.math.BigDecimal camX = me.alphamode.mcbig.math.BigDecimal.ZERO;
     private double camY;
-    private double camZ;
+    private me.alphamode.mcbig.math.BigDecimal camZ = me.alphamode.mcbig.math.BigDecimal.ZERO;
 
     public Frustum(Matrix4f p_254207_, Matrix4f p_254535_) {
         this.calculateFrustum(p_254207_, p_254535_);
@@ -31,33 +_,33 @@
     }
 
     public Frustum offsetToFullyIncludeCameraCube(int p_194442_) {
-        double d0 = Math.floor(this.camX / (double)p_194442_) * (double)p_194442_;
+        me.alphamode.mcbig.math.BigDecimal d0 = this.camX.divide((double)p_194442_).floor().multiply((double)p_194442_);
         double d1 = Math.floor(this.camY / (double)p_194442_) * (double)p_194442_;
-        double d2 = Math.floor(this.camZ / (double)p_194442_) * (double)p_194442_;
-        double d3 = Math.ceil(this.camX / (double)p_194442_) * (double)p_194442_;
+        me.alphamode.mcbig.math.BigDecimal d2 = this.camZ.divide((double)p_194442_).floor().multiply((double)p_194442_);
+        me.alphamode.mcbig.math.BigDecimal d3 = this.camX.divide((double)p_194442_).ceil().multiply((double)p_194442_);
         double d4 = Math.ceil(this.camY / (double)p_194442_) * (double)p_194442_;
 
-        for(double d5 = Math.ceil(this.camZ / (double)p_194442_) * (double)p_194442_;
+        for(me.alphamode.mcbig.math.BigDecimal d5 = this.camZ.divide((double)p_194442_).ceil().multiply((double)p_194442_);
             this.intersection
                     .intersectAab(
-                        (float)(d0 - this.camX),
+                        (float)(d0.subtract(this.camX).floatValue()),
                         (float)(d1 - this.camY),
-                        (float)(d2 - this.camZ),
-                        (float)(d3 - this.camX),
+                        (float)(d2.subtract(this.camZ).floatValue()),
+                        (float)(d3.subtract(this.camX).floatValue()),
                         (float)(d4 - this.camY),
-                        (float)(d5 - this.camZ)
+                        (float)(d5.subtract(this.camZ).floatValue())
                     )
                 != -2;
-            this.camZ -= (double)(this.viewVector.z() * 4.0F)
+            this.camZ = this.camZ.subtract((double)(this.viewVector.z() * 4.0F))
         ) {
-            this.camX -= (double)(this.viewVector.x() * 4.0F);
+            this.camX = this.camX.subtract((double)(this.viewVector.x() * 4.0F));
             this.camY -= (double)(this.viewVector.y() * 4.0F);
         }
 
         return this;
     }
 
-    public void prepare(double p_113003_, double p_113004_, double p_113005_) {
+    public void prepare(me.alphamode.mcbig.math.BigDecimal p_113003_, double p_113004_, me.alphamode.mcbig.math.BigDecimal p_113005_) {
         this.camX = p_113003_;
         this.camY = p_113004_;
         this.camZ = p_113005_;
@@ -73,13 +_,27 @@
         return this.cubeInFrustum(p_113030_.minX, p_113030_.minY, p_113030_.minZ, p_113030_.maxX, p_113030_.maxY, p_113030_.maxZ);
     }
 
+    public boolean isVisible(me.alphamode.mcbig.phys.BigAABB p_113030_) {
+        return this.cubeInFrustum(p_113030_.minX, p_113030_.minY, p_113030_.minZ, p_113030_.maxX, p_113030_.maxY, p_113030_.maxZ);
+    }
+
     private boolean cubeInFrustum(double p_113007_, double p_113008_, double p_113009_, double p_113010_, double p_113011_, double p_113012_) {
-        float f = (float)(p_113007_ - this.camX);
-        float f1 = (float)(p_113008_ - this.camY);
-        float f2 = (float)(p_113009_ - this.camZ);
-        float f3 = (float)(p_113010_ - this.camX);
-        float f4 = (float)(p_113011_ - this.camY);
-        float f5 = (float)(p_113012_ - this.camZ);
+        float f = (float)(me.alphamode.mcbig.math.BigDecimal.val(p_113007_).subtract(this.camX).floatValue());
+        float f1 = (float)(p_113008_ - this.camY);
+        float f2 = (float)(me.alphamode.mcbig.math.BigDecimal.val(p_113009_).subtract(this.camZ).floatValue());
+        float f3 = (float)(me.alphamode.mcbig.math.BigDecimal.val(p_113010_).subtract(this.camX).floatValue());
+        float f4 = (float)(p_113011_ - this.camY);
+        float f5 = (float)(me.alphamode.mcbig.math.BigDecimal.val(p_113012_).subtract(this.camZ).floatValue());
+        return this.intersection.testAab(f, f1, f2, f3, f4, f5);
+    }
+
+    private boolean cubeInFrustum(me.alphamode.mcbig.math.BigDecimal p_113007_, double p_113008_, me.alphamode.mcbig.math.BigDecimal p_113009_, me.alphamode.mcbig.math.BigDecimal p_113010_, double p_113011_, me.alphamode.mcbig.math.BigDecimal p_113012_) {
+        float f = (float)(p_113007_.subtract(this.camX).floatValue());
+        float f1 = (float)(p_113008_ - this.camY);
+        float f2 = (float)(p_113009_.subtract(this.camZ).floatValue());
+        float f3 = (float)(p_113010_.subtract(this.camX).floatValue());
+        float f4 = (float)(p_113011_ - this.camY);
+        float f5 = (float)(p_113012_.subtract(this.camZ).floatValue());
         return this.intersection.testAab(f, f1, f2, f3, f4, f5);
     }
 }
