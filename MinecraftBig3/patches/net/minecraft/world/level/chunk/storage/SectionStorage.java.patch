--- a/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -38,8 +_,8 @@
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String SECTIONS_TAG = "Sections";
     private final IOWorker worker;
-    private final Long2ObjectMap<Optional<R>> storage = new Long2ObjectOpenHashMap<>();
-    private final LongLinkedOpenHashSet dirty = new LongLinkedOpenHashSet();
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectMap<SectionPos, Optional<R>> storage = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>();
+    private final it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet<SectionPos> dirty = new it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet<>();
     private final Function<Runnable, Codec<R>> codec;
     private final Function<Runnable, R> factory;
     private final DataFixer fixerUpper;
@@ -68,7 +_,7 @@
 
     protected void tick(BooleanSupplier p_63812_) {
         while(this.hasWork() && p_63812_.getAsBoolean()) {
-            ChunkPos chunkpos = SectionPos.of(this.dirty.firstLong()).chunk();
+            ChunkPos chunkpos = this.dirty.first().chunk();
             this.writeColumn(chunkpos);
         }
     }
@@ -78,11 +_,11 @@
     }
 
     @Nullable
-    protected Optional<R> get(long p_63819_) {
+    protected Optional<R> get(SectionPos p_63819_) {
         return this.storage.get(p_63819_);
     }
 
-    protected Optional<R> getOrLoad(long p_63824_) {
+    protected Optional<R> getOrLoad(SectionPos p_63824_) {
         if (this.outsideStoredRange(p_63824_)) {
             return Optional.empty();
         } else {
@@ -90,7 +_,7 @@
             if (optional != null) {
                 return optional;
             } else {
-                this.readColumn(SectionPos.of(p_63824_).chunk());
+                this.readColumn(p_63824_.chunk());
                 optional = this.get(p_63824_);
                 if (optional == null) {
                     throw (IllegalStateException)Util.pauseInIde(new IllegalStateException());
@@ -101,12 +_,12 @@
         }
     }
 
-    protected boolean outsideStoredRange(long p_156631_) {
-        int i = SectionPos.sectionToBlockCoord(SectionPos.y(p_156631_));
+    protected boolean outsideStoredRange(SectionPos p_156631_) {
+        int i = SectionPos.sectionToBlockCoord(p_156631_.y()).intValue();
         return this.levelHeightAccessor.isOutsideBuildHeight(i);
     }
 
-    protected R getOrCreate(long p_63828_) {
+    protected R getOrCreate(SectionPos p_63828_) {
         if (this.outsideStoredRange(p_63828_)) {
             throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("sectionPos out of bounds"));
         } else {
@@ -152,7 +_,7 @@
             OptionalDynamic<T> optionaldynamic = dynamic.get("Sections");
 
             for(int l = this.levelHeightAccessor.getMinSection(); l < this.levelHeightAccessor.getMaxSection(); ++l) {
-                long i1 = getKey(p_63802_, l);
+                SectionPos i1 = getKey(p_63802_, l);
                 Optional<R> optional = optionaldynamic.get(Integer.toString(l))
                     .result()
                     .flatMap(p_223519_ -> this.codec.apply(() -> this.setDirty(i1)).parse(p_223519_).resultOrPartial(LOGGER::error));
@@ -182,7 +_,7 @@
         Map<T, T> map = Maps.newHashMap();
 
         for(int i = this.levelHeightAccessor.getMinSection(); i < this.levelHeightAccessor.getMaxSection(); ++i) {
-            long j = getKey(p_63799_, i);
+            SectionPos j = getKey(p_63799_, i);
             this.dirty.remove(j);
             Optional<R> optional = this.storage.get(j);
             if (optional != null && !optional.isEmpty()) {
@@ -205,19 +_,19 @@
         );
     }
 
-    private static long getKey(ChunkPos p_156628_, int p_156629_) {
-        return SectionPos.asLong(p_156628_.x, p_156629_, p_156628_.z);
-    }
-
-    protected void onSectionLoad(long p_63813_) {
-    }
-
-    protected void setDirty(long p_63788_) {
+    private static SectionPos getKey(ChunkPos p_156628_, int p_156629_) {
+        return SectionPos.of(p_156628_, p_156629_);
+    }
+
+    protected void onSectionLoad(SectionPos p_63813_) {
+    }
+
+    protected void setDirty(SectionPos p_63788_) {
         Optional<R> optional = this.storage.get(p_63788_);
         if (optional != null && !optional.isEmpty()) {
             this.dirty.add(p_63788_);
         } else {
-            LOGGER.warn("No data for position: {}", SectionPos.of(p_63788_));
+            LOGGER.warn("No data for position: {}", p_63788_);
         }
     }
 
@@ -228,7 +_,7 @@
     public void flush(ChunkPos p_63797_) {
         if (this.hasWork()) {
             for(int i = this.levelHeightAccessor.getMinSection(); i < this.levelHeightAccessor.getMaxSection(); ++i) {
-                long j = getKey(p_63797_, i);
+                SectionPos j = getKey(p_63797_, i);
                 if (this.dirty.contains(j)) {
                     this.writeColumn(p_63797_);
                     return;
