--- a/net/minecraft/server/commands/ForceLoadCommand.java
+++ b/net/minecraft/server/commands/ForceLoadCommand.java
@@ -102,7 +_,7 @@
         ChunkPos chunkpos = p_137684_.toChunkPos();
         ServerLevel serverlevel = p_137683_.getLevel();
         ResourceKey<Level> resourcekey = serverlevel.dimension();
-        boolean flag = serverlevel.getForcedChunks().contains(chunkpos.toLong());
+        boolean flag = serverlevel.getForcedChunks().contains(chunkpos);
         if (flag) {
             p_137683_.sendSuccess(
                 () -> Component.translatable(
@@ -119,10 +_,10 @@
     private static int listForceLoad(CommandSourceStack p_137681_) {
         ServerLevel serverlevel = p_137681_.getLevel();
         ResourceKey<Level> resourcekey = serverlevel.dimension();
-        LongSet longset = serverlevel.getForcedChunks();
+        it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> longset = serverlevel.getForcedChunks();
         int i = longset.size();
         if (i > 0) {
-            String s = Joiner.on(", ").join(longset.stream().sorted().map(ChunkPos::new).map(ChunkPos::toString).iterator());
+            String s = Joiner.on(", ").join(longset.stream().sorted().map(ChunkPos::toString).iterator());
             if (i == 1) {
                 p_137681_.sendSuccess(
                     () -> Component.translatable("commands.forceload.list.single", Component.translationArg(resourcekey.location()), s), false
@@ -142,76 +_,72 @@
     private static int removeAll(CommandSourceStack p_137696_) {
         ServerLevel serverlevel = p_137696_.getLevel();
         ResourceKey<Level> resourcekey = serverlevel.dimension();
-        LongSet longset = serverlevel.getForcedChunks();
-        longset.forEach(p_137675_ -> serverlevel.setChunkForced(ChunkPos.getX(p_137675_), ChunkPos.getZ(p_137675_), false));
+        it.unimi.dsi.fastutil.objects.ObjectSet<ChunkPos> longset = serverlevel.getForcedChunks();
+        longset.forEach(p_137675_ -> serverlevel.setChunkForced(p_137675_.x(), p_137675_.z(), false));
         p_137696_.sendSuccess(() -> Component.translatable("commands.forceload.removed.all", Component.translationArg(resourcekey.location())), true);
         return 0;
     }
 
     private static int changeForceLoad(CommandSourceStack p_137686_, ColumnPos p_137687_, ColumnPos p_137688_, boolean p_137689_) throws CommandSyntaxException {
-        int i = Math.min(p_137687_.x(), p_137688_.x());
-        int j = Math.min(p_137687_.z(), p_137688_.z());
-        int k = Math.max(p_137687_.x(), p_137688_.x());
-        int l = Math.max(p_137687_.z(), p_137688_.z());
-        if (i >= -30000000 && j >= -30000000 && k < 30000000 && l < 30000000) {
-            int i1 = SectionPos.blockToSectionCoord(i);
-            int j1 = SectionPos.blockToSectionCoord(j);
-            int k1 = SectionPos.blockToSectionCoord(k);
-            int l1 = SectionPos.blockToSectionCoord(l);
-            long i2 = ((long)(k1 - i1) + 1L) * ((long)(l1 - j1) + 1L);
-            if (i2 > 256L) {
-                throw ERROR_TOO_MANY_CHUNKS.create(256, i2);
-            } else {
-                ServerLevel serverlevel = p_137686_.getLevel();
-                ResourceKey<Level> resourcekey = serverlevel.dimension();
-                ChunkPos chunkpos = null;
-                int j2 = 0;
+        me.alphamode.mcbig.math.BigInteger i = p_137687_.x().min(p_137688_.x());
+        me.alphamode.mcbig.math.BigInteger j = p_137687_.z().min(p_137688_.z());
+        me.alphamode.mcbig.math.BigInteger k = p_137687_.x().max(p_137688_.x());
+        me.alphamode.mcbig.math.BigInteger l = p_137687_.z().max(p_137688_.z());
+        me.alphamode.mcbig.math.BigInteger i1 = SectionPos.blockToSectionCoord(i);
+        me.alphamode.mcbig.math.BigInteger j1 = SectionPos.blockToSectionCoord(j);
+        me.alphamode.mcbig.math.BigInteger k1 = SectionPos.blockToSectionCoord(k);
+        me.alphamode.mcbig.math.BigInteger l1 = SectionPos.blockToSectionCoord(l);
+        long i2 = ((long)(k1.subtract(i1)).longValue() + 1L) * ((long)(l1.subtract(j1)).longValue() + 1L);
+        if (i2 > 256L) {
+            throw ERROR_TOO_MANY_CHUNKS.create(256, i2);
+        } else {
+            ServerLevel serverlevel = p_137686_.getLevel();
+            ResourceKey<Level> resourcekey = serverlevel.dimension();
+            ChunkPos chunkpos = null;
+            int j2 = 0;
 
-                for(int k2 = i1; k2 <= k1; ++k2) {
-                    for(int l2 = j1; l2 <= l1; ++l2) {
-                        boolean flag = serverlevel.setChunkForced(k2, l2, p_137689_);
-                        if (flag) {
-                            ++j2;
-                            if (chunkpos == null) {
-                                chunkpos = new ChunkPos(k2, l2);
-                            }
+            for(me.alphamode.mcbig.math.BigInteger k2 = i1; k2.compareTo(k1) <= 0; k2 = k2.add()) {
+                for(me.alphamode.mcbig.math.BigInteger l2 = j1; l2.compareTo(l1) <= 0; l2 = l2.add()) {
+                    boolean flag = serverlevel.setChunkForced(k2, l2, p_137689_);
+                    if (flag) {
+                        ++j2;
+                        if (chunkpos == null) {
+                            chunkpos = new ChunkPos(k2, l2);
                         }
                     }
                 }
+            }
 
-                ChunkPos chunkpos1 = chunkpos;
-                if (j2 == 0) {
-                    throw (p_137689_ ? ERROR_ALL_ADDED : ERROR_NONE_REMOVED).create();
+            ChunkPos chunkpos1 = chunkpos;
+            if (j2 == 0) {
+                throw (p_137689_ ? ERROR_ALL_ADDED : ERROR_NONE_REMOVED).create();
+            } else {
+                if (j2 == 1) {
+                    p_137686_.sendSuccess(
+                        () -> Component.translatable(
+                                "commands.forceload." + (p_137689_ ? "added" : "removed") + ".single",
+                                Component.translationArg(chunkpos1),
+                                Component.translationArg(resourcekey.location())
+                            ),
+                        true
+                    );
                 } else {
-                    if (j2 == 1) {
-                        p_137686_.sendSuccess(
-                            () -> Component.translatable(
-                                    "commands.forceload." + (p_137689_ ? "added" : "removed") + ".single",
-                                    Component.translationArg(chunkpos1),
-                                    Component.translationArg(resourcekey.location())
-                                ),
-                            true
-                        );
-                    } else {
-                        ChunkPos chunkpos2 = new ChunkPos(i1, j1);
-                        ChunkPos chunkpos3 = new ChunkPos(k1, l1);
-                        p_137686_.sendSuccess(
-                            () -> Component.translatable(
-                                    "commands.forceload." + (p_137689_ ? "added" : "removed") + ".multiple",
-                                    Component.translationArg(chunkpos1),
-                                    Component.translationArg(resourcekey.location()),
-                                    Component.translationArg(chunkpos2),
-                                    Component.translationArg(chunkpos3)
-                                ),
-                            true
-                        );
-                    }
-
-                    return j2;
+                    ChunkPos chunkpos2 = new ChunkPos(i1, j1);
+                    ChunkPos chunkpos3 = new ChunkPos(k1, l1);
+                    p_137686_.sendSuccess(
+                        () -> Component.translatable(
+                                "commands.forceload." + (p_137689_ ? "added" : "removed") + ".multiple",
+                                Component.translationArg(chunkpos1),
+                                Component.translationArg(resourcekey.location()),
+                                Component.translationArg(chunkpos2),
+                                Component.translationArg(chunkpos3)
+                            ),
+                        true
+                    );
                 }
+
+                return j2;
             }
-        } else {
-            throw BlockPosArgument.ERROR_OUT_OF_WORLD.create();
         }
     }
 }
